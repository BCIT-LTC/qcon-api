# Subroutines for deployment


# Configure cluster ENV; vars defined here are not available for GitLab `environment` definitions
#   Currently limited to:
#     - "dev-cp"
#     - "dev-vsm"
#     - "staging"
#     - "prod"
.get_env:
  script:
    - |
      if [ "$CI_ENV" == "dev" ] && [ $TEAM_TAG == "dev-cp" ]
      then
          CI_HOST="$DEV_HOST"
          NAMESPACE_NAME="$CI_COMMIT_REF_SLUG"
          CLUSTER_ID="$RANCHER_DEV_CP_CLUSTER_ID"
          PROJECT_ID="$RANCHER_DEV_CP_DEFAULT_PROJECT_ID"
      elif [ "$CI_ENV" == "dev" ] && [ $TEAM_TAG == "dev-vsm" ]
      then
          CI_HOST="$DEV_HOST"
          NAMESPACE_NAME="$CI_COMMIT_REF_SLUG"
          CLUSTER_ID="$RANCHER_DEV_VSM_CLUSTER_ID"
          PROJECT_ID="$RANCHER_DEV_VSM_DEFAULT_PROJECT_ID"
      elif [ "$CI_ENV" == "staging" ]
      then
          CI_HOST="$STAGING_HOST"
          NAMESPACE_NAME="$CI_PROJECT_NAME"
          CLUSTER_ID="$RANCHER_STAGING_CLUSTER_ID"
          PROJECT_ID="$RANCHER_STAGING_DEFAULT_PROJECT_ID"
          TLS_SECRET_NAME="star-dev-ltc-bcit-ca"
      elif [ "$CI_ENV" == "prod" ]
      then
          CI_HOST="$PROD_HOST"
          NAMESPACE_NAME="$CI_PROJECT_NAME"
          CLUSTER_ID="$RANCHER_PROD_CLUSTER_ID"
          PROJECT_ID="$RANCHER_PROD_DEFAULT_PROJECT_ID"
          TLS_SECRET_NAME="star-dev-ltc-bcit-ca"
          VERSION_TAG="$(echo $CI_COMMIT_TAG | cut -c 2-)"
      else
          echo "\"$CI_ENV\" is not set correctly"
          exit 1
      fi


# Creates a namespace annotation to ensure it's visible in the Rancher Default project
.annotate_namespace:
  script:
    - |
      echo -e " \
      \nnamespace: $NAMESPACE_NAME \
      \npatches: \
      \n  - patch: |- \
      \n      - op: add \
      \n        path: /metadata/annotations/field.cattle.io~1projectId \
      \n        value: $CLUSTER_ID:$PROJECT_ID \
      \n    target: \
      \n      kind: Namespace" >> deploy/overlays/$CI_ENV/kustomization.yaml

      echo -e "\nNamespace resource patched"


# Creates deployment annotations that mirror image labels that can be injected into the kubernetes resource
.annotate_deployment:
  script:
    - |
      echo -e " \
        \n[ \
        \n  {\"op\": \"add\", \"path\": \"/metadata/annotations/cluster_name\", \"value\": \"$CI_ENV\"}, \
        \n  {\"op\": \"add\", \"path\": \"/metadata/annotations/path_name\", \"value\": \"$NAMESPACE_NAME\"}, \
        \n  {\"op\": \"add\", \"path\": \"/metadata/annotations/version\", \"value\": \"$VERSION_TAG\"}, \
        \n  {\"op\": \"add\", \"path\": \"/metadata/annotations/build_hash\", \"value\": \"$CI_COMMIT_SHA\"}, \
        \n  {\"op\": \"add\", \"path\": \"/metadata/annotations/build_short_sha\", \"value\": \"$CI_COMMIT_SHORT_SHA\"}, \
        # \n  {\"op\": \"add\", \"path\": \"/metadata/annotations/build_timestamp\", \"value\": \"$CI_PIPELINE_CREATED_AT\"} \
        \n]" > deploy/overlays/$CI_ENV/deployment-patch.json

      echo -e "\nJSON patch:"
      cat deploy/overlays/$CI_ENV/deployment-patch.json


      echo -e " \
      \npatches: \
      \n  - target: \
      \n      kind: Deployment \
      \n      name: $CI_PROJECT_NAME \
      \n      namespace: $NAMESPACE_NAME \
      \n    path: deployment-patch.json" >> deploy/overlays/$CI_ENV/kustomization.yaml

      echo -e "\nDeployment resource patched"


# Reset namespace if "PROD_NAMESPACE" is set
.prod_namespace:
  script:
    - |
      if [ -n "$PROD_NAMESPACE" ] && ( [ "$CI_ENV" == "staging" ] || [ "$CI_ENV" == "prod" ] )
      then
          NAMESPACE_NAME="$PROD_NAMESPACE"
      fi

      echo -e " \
      \nnamespace: $NAMESPACE_NAME" >> deploy/overlays/$CI_ENV/kustomization.yaml

      echo -e "\nNamespace name reset to $NAMESPACE_NAME"


# add kustomizations to pull latest commit image for dev/staging
.kustomize_image:
  script:
    - |
      if [ "$CI_ENV" == "prod" ]
      then
          DEPLOY_TAG="$CI_COMMIT_TAG"
      else
          DEPLOY_TAG="$CI_COMMIT_SHORT_SHA"
      fi

      echo -e "\nDeploy tag set to: $DEPLOY_TAG"

      echo -e " \
        \nimages: \
        \n  - name: $CI_PROJECT_NAME \
        \n    newName: $CI_REGISTRY_IMAGE \
        \n    newTag: $DEPLOY_TAG" >> deploy/overlays/$CI_ENV/kustomization.yaml

      echo -e "\nImage patch applied"


# add annotations that link a deployment to GitLab's Environment/Operations dashboards
.add_common_annotations:
  script:
    - |
      echo -e " \
        \ncommonAnnotations: \
        \n  app.gitlab.com/app: $CI_PROJECT_PATH_SLUG \
        \n  app.gitlab.com/env: $CI_ENVIRONMENT_SLUG" >> deploy/overlays/$CI_ENV/kustomization.yaml

      echo -e " \
        \nCommon annotations applied"


# Patches existing `ingress.yaml` to be applied to kustomization
# target URL:
#   - https://{CI_PROJECT_NAME}.{TEAM_TAG}.reviews.dev.ltc.bcit.ca/{CI_COMMIT_REF_SLUG}
#     eg. https://qcon-api.dev-cp.reviews.dev.ltc.bcit.ca/189-fix-tls
.patch_ingress_dev:
  script:
    - |
      echo -e " \
        \napiVersion: networking.k8s.io/v1 \
        \nkind: Ingress \
        \nmetadata: \
        \n  name: $CI_PROJECT_NAME-ingress \
        \n  namespace: $NAMESPACE_NAME \
        \n  annotations: \
        \n    nginx.ingress.kubernetes.io/rewrite-target: /\$2 \
        \n    nginx.ingress.kubernetes.io/configuration-snippet: rewrite ($NAMESPACE_NAME)$ $NAMESPACE_NAME/ redirect; \
        \nspec: \
        \n  rules: \
        \n  - host: $CI_PROJECT_NAME.$TEAM_TAG.$CI_HOST \
        \n    http: \
        \n      paths: \
        \n      - path: /$NAMESPACE_NAME \
        \n        pathType: Prefix \
        \n        backend: \
        \n          service: \
        \n            name: $CI_PROJECT_NAME-service \
        \n            port: \
        \n              number: $APP_PORT" > deploy/overlays/$CI_ENV/ingress.yaml

      echo -e " \
        \nStaging/Prod ingress patched"


# STAGING target URL: 
  # - https://latest.dev.ltc.bcit.ca/{CI_PROJECT_NAME}
  #   eg. https://latest.dev.ltc.bcit.ca/qcon-api

# PROD target URLs:
# Default
  # - https://stable.dev.ltc.bcit.ca/{CI_PROJECT_NAME}
  #   eg. https://stable.dev.ltc.bcit.ca/qcon-api
# Extra
  # - https://{PROD_NAMESPACE}.ltc.bcit.ca/
  #   eg. https://qcon-api.ltc.bcit.ca
.patch_ingress:
  script:
    - |
      echo -e " \
        \napiVersion: networking.k8s.io/v1 \
        \nkind: Ingress \
        \nmetadata: \
        \n  name: $CI_PROJECT_NAME-ingress \
        \n  namespace: $NAMESPACE_NAME \
        \n  annotations: \
        \n    nginx.ingress.kubernetes.io/rewrite-target: /\$2 \
        \n    nginx.ingress.kubernetes.io/configuration-snippet: rewrite ($CI_PROJECT_NAME)$ $CI_PROJECT_NAME/ redirect; \
        \nspec: \
        \n  tls: \
        \n  - hosts: \
        \n    - $CI_HOST \
        \n    secretName: $TLS_SECRET_NAME \
        \n  rules: \
        \n  - host: $CI_HOST \
        \n    http: \
        \n      paths: \
        \n      - path: /$CI_PROJECT_NAME \
        \n        pathType: Prefix \
        \n        backend: \
        \n          service: \
        \n            name: $CI_PROJECT_NAME-service \
        \n            port: \
        \n              number: $APP_PORT" > deploy/overlays/$CI_ENV/ingress.yaml

      echo -e " \
        \nStaging/Prod ingress patched"


# create tls secret for ingress via Kustomize secretGenerator spec
.create_tls_secret:
  script:
    - |
      echo "$TLS_CRT" | base64 --decode > deploy/overlays/$CI_ENV/tls.crt
      echo "$TLS_KEY" | base64 --decode > deploy/overlays/$CI_ENV/tls.key

      echo -e " \
        \nTLS cert and key files created"


# validate kustomizations that have been patched are syntactictally correct
.verify_kustomization:
  script:
    - |
      echo -e " \
        \nKustomization applied:"

      cat deploy/overlays/$CI_ENV/kustomization.yaml

      echo -e " \
        \nResources applied to cluster:"

      kubectl kustomize deploy/overlays/$CI_ENV


# Common Tags and Rules for jobs
.feature_branch_rules:
  rules:
    - if: '$CI_COMMIT_BRANCH == "main" || $CI_COMMIT_BRANCH == "release"'
      when: never
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" || $CI_MERGE_REQUEST_EVENT_TYPE == "detached"'
      when: never
    - if: '$CI_PIPELINE_SOURCE == "push" && $CI_OPEN_MERGE_REQUESTS'
  tags:
    - $TEAM_TAG

.main_branch_rules:
  rules:
    - if: '$CI_COMMIT_REF_SLUG == "main" && $CI_PIPELINE_SOURCE == "push"'
  tags:
    - staging

.semver_tag_rules:
  rules:
    - if: '$CI_COMMIT_REF_SLUG == "release" && $CI_PIPELINE_SOURCE == "push"'
  tags:
    - production

.release_branch_rules:
  rules:
    - if: $CI_COMMIT_TAG
  tags:
    - production

# Patches existing `deployment.yaml` to be applied to kustomization
# to add volume mounts to inject annotations and labels to the deployment
.patch_deployment_dev:
  script:
    - |
      echo -e " \
        \napiVersion: apps/v1 \
        \nkind: Deployment \
        \nmetadata: \
        \n  name: $CI_PROJECT_NAME \
        \n  namespace: $NAMESPACE_NAME \
        \n  labels: \
        \n    app: $CI_PROJECT_NAME \
        \nspec: \
        \n  template: \
        \n    spec: \
        \n      containers: \
        \n      - name: qcon-api \
        \n        image: qcon-api \
        \n        volumeMounts: \
        \n          - name: podinfo \
        \n            mountPath: /etc/podinfo \
        \n      volumes: \
        \n        - name: podinfo \
        \n          downwardAPI: \
        \n            items: \
        \n              - path: "labels" \
        \n                fieldRef: \
        \n                  fieldPath: metadata.labels \
        \n              - path: "annotations" \
        \n                fieldRef: \
        \n                  fieldPath: metadata.annotations" > deploy/overlays/$CI_ENV/deployment.yaml

      echo -e " \
        \nDev deployment patched"
