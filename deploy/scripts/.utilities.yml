# Subroutines for deployment

# Sets standard vars and generates VERSION_TAG for dev/staging
# Tag format:
#   - image format: "1.5.3"
#   - GitLab release format: "v1.5.3"
#   - app format (feature/main branch): "v1.5.3-c7754fc6"
#   - app format (release branch): "v1.5.3"
.version_tag:
  image: alpine/git:latest
  script:
    - echo "VERSION_TAG=v$(git describe --tags $(git rev-list --tags --max-count=1) | cut -c 2-)-$CI_COMMIT_SHORT_SHA" | tee version_tag.env
  artifacts:
    reports:
      dotenv: version_tag.env
  tags:
    - production


# Removes commit_short_sha from VERSION_TAG (Prod only)
.update_version_tag:
  script:
    - |
      echo "VERSION_TAG=$(echo $CI_COMMIT_TAG | cut -c 2-)" | tee version_tag.env
      echo -e " \
        \nPROD_NAMESPACE detected. Setting VERSION_TAG to $VERSION_TAG \
        \n"
  artifacts:
    reports:
      dotenv: version_tag.env


.update_env:
  script:
    - |
      VERSION_TAG=$VERSION_TAG
      BUILD_SHORT_SHA=$CI_COMMIT_SHORT_SHA
      BUILD_HASH=$CI_COMMIT_SHA
      BUILD_TIMESTAMP=$CI_PIPELINE_CREATED_AT

      # API_HOST variable is specific to project
      echo -e "API_HOST=http://$CI_PROJECT_NAME.$CLUSTER_ENV.$DEV_HOST/$CI_COMMIT_REF_SLUG \
        " >> .env

      if [[ "$PIPELINE_DEBUG" == "true" ]]; then
        echo -e " \
          \n\e[31m##### .env contents: #####\e[0m \
          \n"
        cat .env
      fi


# Configures cluster ENVs
#   - vars defined here are not available for GitLab `environment` definitions
#   - currently limited to:
#       - "dev-cp"
#       - "dev-vsm"
# Please note: Secret names correspond to certificate SAN's (eg. star-dev-ltc-bcit-ca protects `*.dev.ltc.bcit.ca`)
.get_env:
  script:
    - |
      if [[ "$BUILD_ENV" == "dev" ]] && [[ $CLUSTER_ENV == "dev-cp" ]]; then

          CI_HOST="$DEV_HOST"
          NAMESPACE_NAME="$CI_COMMIT_REF_SLUG"
          CLUSTER_ID="$RANCHER_DEV_CP_CLUSTER_ID"
          PROJECT_ID="$RANCHER_DEV_CP_DEFAULT_PROJECT_ID"
          TLS_SECRET_NAME="secret not used in dev environment"

      elif [[ "$BUILD_ENV" == "dev" ]] && [[ $CLUSTER_ENV == "dev-vsm" ]]; then

          CI_HOST="$DEV_HOST"
          NAMESPACE_NAME="$CI_COMMIT_REF_SLUG"
          CLUSTER_ID="$RANCHER_DEV_VSM_CLUSTER_ID"
          PROJECT_ID="$RANCHER_DEV_VSM_DEFAULT_PROJECT_ID"
          TLS_SECRET_NAME="secret not used in dev environment"

      elif [[ "$BUILD_ENV" == "staging" ]]; then

          CI_HOST="$STAGING_HOST"
          NAMESPACE_NAME="$CI_PROJECT_NAME"
          CLUSTER_ID="$RANCHER_STAGING_CLUSTER_ID"
          PROJECT_ID="$RANCHER_STAGING_DEFAULT_PROJECT_ID"
          TLS_SECRET_NAME="star-dev-ltc-bcit-ca"

      elif [[ "$BUILD_ENV" == "prod" ]]; then

          CI_HOST="$PROD_HOST"
          NAMESPACE_NAME="$CI_PROJECT_NAME"
          CLUSTER_ID="$RANCHER_PROD_CLUSTER_ID"
          PROJECT_ID="$RANCHER_PROD_DEFAULT_PROJECT_ID"
          TLS_SECRET_NAME="star-dev-ltc-bcit-ca"
      else
          echo -e " \
            \$BUILD_ENV is not set correctly \
            \n"
          exit 1
      fi

      echo -e "BUILD_ENV: $BUILD_ENV \
        \n CLUSTER_ENV: $CLUSTER_ENV \
        \n CI_HOST: $CI_HOST \
        \n NAMESPACE_NAME: $NAMESPACE_NAME \
        \n CLUSTER_ID: $CLUSTER_ID \
        \n PROJECT_ID: $PROJECT_ID \
        \n TLS_SECRET_NAME: $TLS_SECRET_NAME \
        \n VERSION_TAG: $VERSION_TAG" | tee env_vars.env
  artifacts:
    reports:
      dotenv: env_vars.env


# Creates a namespace annotation to ensure it's visible in the Rancher Default project
.replace_namespace:
  script:
    - |
      if [[ -n "$PROD_NAMESPACE" ]] && ( [[ "$BUILD_ENV" == "staging" ]] || [[ "$BUILD_ENV" == "prod" ]] ); then
          NAMESPACE_NAME="$PROD_NAMESPACE"
          echo -e " \
            \nPROD_NAMESPACE detected. Setting NAMESPACE_NAME to $NAMESPACE_NAME \
            \n"
      fi

      echo -e " \
        \napiVersion: v1 \
        \nkind: Namespace \
        \nmetadata: \
        \n  name: $NAMESPACE_NAME \
        \n  annotations: \
        \n    field.cattle.io/projectId: \"$CLUSTER_ID:$PROJECT_ID\" \
        \n" \
        \
        > deploy/overlays/$BUILD_ENV/namespace.yaml
      
      if [[ "$PIPELINE_DEBUG" == "true" ]]; then
        echo -e " \
          \n\e[31m##### Updated namespace file: #####\e[0m \
          \n"
        cat deploy/overlays/$BUILD_ENV/namespace.yaml
      fi

      echo -e "$(cat deploy/overlays/$BUILD_ENV/kustomization.yaml | sed "s/namespace:.*/namespace: $NAMESPACE_NAME/g")" \
        \
        > deploy/overlays/$BUILD_ENV/kustomization.yaml

      echo -e " \
        \nNamespace patch added to kustomization \
        \n"

      if [[ "$PIPELINE_DEBUG" == "true" ]]; then
        echo -e " \
          \n\e[31m##### Patched kustomization file: #####\e[0m \
          \n"
        cat deploy/overlays/$BUILD_ENV/kustomization.yaml
      fi
  

# Creates deployment annotations that mirror image labels that can be injected into the kubernetes resource
# Please note:
#   - `path_name` and `cluster_name` are only added as annotations to the kubernetes resource
#   - `title` and `description` are only added as labels to the image
.replace_deployment:
  script:
    - |
      echo -e " \
        \npatchesStrategicMerge: \
        \n- |- \
        \n  apiVersion: apps/v1 \
        \n  kind: Deployment \
        \n  metadata: \
        \n    name: $CI_PROJECT_NAME \
        \n  spec: \
        \n    template: \
        \n      metadata: \
        \n        annotations: \
        \n          version: \"$VERSION_TAG\" \
        \n          build_hash: \"$CI_COMMIT_SHA\" \
        \n          build_short_sha: \"$CI_COMMIT_SHORT_SHA\" \
        \n          build_timestamp: \"$CI_PIPELINE_CREATED_AT\" \
        \n          build_env: \"$BUILD_ENV\" \
        \n          path_name: \"$NAMESPACE_NAME\" \
        \n          cluster_name: \"$CLUSTER_ENV\" \
        \n" \
        \
        >> deploy/overlays/$BUILD_ENV/kustomization.yaml

      if [[ "$PIPELINE_DEBUG" == "true" ]]; then
        echo -e " \
          \n\e[31m##### Updated deployment patch file: #####\e[0m \
          \n"
        cat deploy/overlays/$BUILD_ENV/deployment.yaml
      fi

      echo -e " \
        \nDeployment patch info: \
        \n \
        \n  version: $VERSION_TAG \
        \n  build_hash: $CI_COMMIT_SHA \
        \n  build_short_sha: $CI_COMMIT_SHORT_SHA \
        \n  build_timestamp: $CI_PIPELINE_CREATED_AT \
        \n  build_env: $BUILD_ENV \
        \n  path_name: $NAMESPACE_NAME \
        \n  cluster_name: $BUILD_ENV \
        \n  app.gitlab.com/app: $CI_PROJECT_PATH_SLUG \
        \n  app.gitlab.com/env: $CI_ENVIRONMENT_SLUG \
        \n"


# Adds kustomizations to pull latest commit image for dev/staging
.kustomize_image:
  script:
    - |
      if [[ "$BUILD_ENV" == "prod" ]]; then
          IMAGE_TAG=$(echo $CI_COMMIT_TAG | cut -c 2-)
      else
          IMAGE_TAG="\"$CI_COMMIT_SHORT_SHA\""
      fi

      echo -e " \
        \nDeploy tag set to: $IMAGE_TAG \
        \n"

      echo -e " \
        \nimages: \
        \n  - name: $CI_PROJECT_NAME \
        \n    newName: $CI_REGISTRY_IMAGE \
        \n    newTag: $IMAGE_TAG \
        \n" \
        \
        >> deploy/overlays/$BUILD_ENV/kustomization.yaml

      echo -e " \
        \nImage patch added to kustomization \
        \n"

      if [[ "$PIPELINE_DEBUG" == "true" ]]; then
        echo -e " \
          \n\e[31m##### Patched kustomization file: #####\e[0m \
          \n"
        cat deploy/overlays/$BUILD_ENV/kustomization.yaml
      fi


# Adds annotations that link a deployment to GitLab's Environment/Operations dashboards
.add_common_annotations:
  script:
    - |
      echo -e " \
        \ncommonAnnotations: \
        \n  app.gitlab.com/app: $CI_PROJECT_PATH_SLUG \
        \n  app.gitlab.com/env: $CI_ENVIRONMENT_SLUG \
        \n" \
        \
        >> deploy/overlays/$BUILD_ENV/kustomization.yaml

      echo -e "\nCommon annotations added to kustomization"

      if [[ "$PIPELINE_DEBUG" == "true" ]]; then
        echo -e " \
          \n\e[31m##### Patched kustomization file: #####\e[0m \
          \n"
        cat deploy/overlays/$BUILD_ENV/kustomization.yaml
      fi


# Patches `ingress.yaml`
# Dev target URL:
#   - https://{CI_PROJECT_NAME}.{CLUSTER_ENV}.reviews.dev.ltc.bcit.ca/{CI_COMMIT_REF_SLUG}
#     eg. https://qcon-api.dev-cp.reviews.dev.ltc.bcit.ca/189-fix-tls
#
# Staging target URL: 
  # - https://latest.dev.ltc.bcit.ca/{CI_PROJECT_NAME}
  #   eg. https://latest.dev.ltc.bcit.ca/qcon-api
#
# Prod target URLs:
# Default
  # - https://stable.dev.ltc.bcit.ca/{CI_PROJECT_NAME}
  #   eg. https://stable.dev.ltc.bcit.ca/qcon-api
#
# Extra (not yet implemented)
  # - https://{PROD_NAMESPACE}.ltc.bcit.ca/
  #   eg. https://qcon-api.ltc.bcit.ca
#
.patch_ingress:
  script:
    - |
      if [[ "$BUILD_ENV" == "staging" ]] || [[ "$BUILD_ENV" == "prod" ]]; then

        echo -e " \
          \napiVersion: networking.k8s.io/v1 \
          \nkind: Ingress \
          \nmetadata: \
          \n  name: $CI_PROJECT_NAME-ingress \
          \n  annotations: \
          \n    nginx.ingress.kubernetes.io/configuration-snippet: \
                  rewrite ($CI_PROJECT_NAME)$ $CI_PROJECT_NAME/ redirect; \
                  rewrite ^/($CI_PROJECT_NAME)/(.*) /\$2 break; \
          \nspec: \
          \n  tls: \
          \n    - hosts: \
          \n      - $CI_HOST \
          \n      secretName: $TLS_SECRET_NAME \
          \n  rules: \
          \n    - host: $CI_HOST \
          \n      http: \
          \n        paths: \
          \n        - path: /$CI_PROJECT_NAME \
          \n          pathType: Prefix \
          \n          backend: \
          \n            service: \
          \n              name: $CI_PROJECT_NAME-service \
          \n              port: \
          \n                number: $APP_PORT \
          \n" \
          \
          > deploy/overlays/$BUILD_ENV/ingress.yaml
      
      else

        echo -e " \
          \napiVersion: networking.k8s.io/v1 \
          \nkind: Ingress \
          \nmetadata: \
          \n  name: $CI_PROJECT_NAME-ingress \
          \n  annotations: \
          \n    nginx.ingress.kubernetes.io/configuration-snippet: \
                  rewrite ($NAMESPACE_NAME)$ $NAMESPACE_NAME/ redirect; \
                  rewrite ^/($NAMESPACE_NAME)/(.*) /\$2 break; \
          \nspec: \
          \n  rules: \
          \n    - host: $CI_PROJECT_NAME.$CLUSTER_ENV.$CI_HOST \
          \n      http: \
          \n        paths: \
          \n          - path: /$NAMESPACE_NAME \
          \n            pathType: Prefix \
          \n            backend: \
          \n              service: \
          \n                name: $CI_PROJECT_NAME-service \
          \n                port: \
          \n                  number: $APP_PORT \
          \n" \
          \
          > deploy/overlays/$BUILD_ENV/ingress.yaml      
      fi

      echo -e " \
        \nIngress resource replaced with $BUILD_ENV kustomization \
        \n"
      
      if [[ "$PIPELINE_DEBUG" == "true" ]]; then
        echo -e " \
          \n\e[31m##### Updated ingress file: #####\e[0m \
          \n"
        cat deploy/overlays/$BUILD_ENV/ingress.yaml
      fi

# Creates tls secret for ingress via Kustomize secretGenerator
.create_tls_secret:
  script:
    - |
      echo "$TLS_CRT" | base64 --decode > deploy/overlays/$BUILD_ENV/tls.crt
      echo "$TLS_KEY" | base64 --decode > deploy/overlays/$BUILD_ENV/tls.key

      echo -e "\nData files for TLS secret generation created successfully"


# DEBUG TRACE HELPER (enable in main pipeline): Validates kustomizations
.verify_kustomization:
  script:
    - |
      if [[ "$PIPELINE_DEBUG" == "true" ]]; then
        echo -e " \
          \n\e[31m##### Patched kustomization file: #####\e[0m \
          \n"
        cat deploy/overlays/$BUILD_ENV/kustomization.yaml
        echo -e " \
          \n\e[31m##### Kustomized resources being applied to cluster: #####\e[0m \
          \n"
        kubectl kustomize deploy/overlays/$BUILD_ENV
      fi


# Common Tags and Rules for jobs
.feature_branch_rules:
  rules:
    - if: '$CI_COMMIT_BRANCH == "main" || $CI_COMMIT_BRANCH == "release"'
      when: never
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" || $CI_MERGE_REQUEST_EVENT_TYPE == "detached"'
      when: never
    - if: '$CI_PIPELINE_SOURCE == "push" && $CI_OPEN_MERGE_REQUESTS'
  tags:
    - $CLUSTER_ENV

.main_branch_rules:
  rules:
    - if: '$CI_COMMIT_REF_SLUG == "main" && $CI_PIPELINE_SOURCE == "push"'
  tags:
    - staging

.semver_tag_rules:
  rules:
    - if: '$CI_COMMIT_REF_SLUG == "release" && $CI_PIPELINE_SOURCE == "push"'
  tags:
    - production

.release_branch_rules:
  rules:
    - if: $CI_COMMIT_TAG
  tags:
    - production