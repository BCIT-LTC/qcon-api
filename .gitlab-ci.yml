##### Pipeline Overview #####
#
# #### `main` branch ####
#
# - continuously deployed to k8s staging cluster
# - on all MR, build new image tagged "latest"
# - deploy image tagged `latest` to k8s staging cluster
#
# #### `release` branch ####
#
# - continuously deployed to k8s prod cluster
# - on all MR, build new GitLab release
# - git tag commit with semantic-release version
# - build new image tagged with semver version
# - build new image tagged with `stable`
# - deploy image tagged `stable` to k8s prod cluster (Fleet)
#
# #### Notes ####
#
# - builds performed by Kaniko (k8s prod cluster)
#   - Kaniko docs are here: https://github.com/GoogleContainerTools/kaniko
#   - GitLab CI/CD pipeline docs for Kaniko builds are here: https://docs.gitlab.com/ee/ci/docker/using_kaniko.html
# - semantic versioning is automated by analyzing commit messages for keywords
#   - refer to : https://semantic-release.gitbook.io/semantic-release/usage/configuration for CLI configuration

stages:
  - test
  - build
  - review
  - semver-tag
  - deploy

# include:
#   - template: Security/SAST.gitlab-ci.yml
#   - template: Security/Secret-Detection.gitlab-ci.yml
#   - template: Security/License-Scanning.gitlab-ci.yml

variables:
  KANIKO_CACHE_ARGS: "--cache=true --cache-copy-layers=true --cache-ttl=24h"
  VAULT_SERVER_URL: "https://vault.ltc.bcit.ca:8200"
  VAULT_AUTH_ROLE: "read-tokens"
  PROJECT_REGISTRY: "registry.dev.ltc.bcit.ca"
  KUBERNETES_POD_ANNOTATIONS_1: "app.gitlab.com/env=$CI_ENVIRONMENT_SLUG"
  KUBERNETES_POD_ANNOTATIONS_2: "app.gitlab.com/app=$CI_PROJECT_PATH_SLUG"

# #### Re-usable configurations ####
#
# Kaniko template
# .build_with_kaniko:
#   stage: build
#   tags:
#     - dependabot
#   image: 
#     name: gcr.io/kaniko-project/executor:debug
#     entrypoint: [""]

# Deploy template
#   extends: .deploy
# .deploy:
#   stage: deploy
#   tags:
#     - dependabot
#   image: bitnami/kubectl:latest

  # needs: ["security_scan"]


# #### Jobs ####
#
# Run static application security test (https://issues.ltc.bcit.ca/help/user/application_security/sast/index)
security_scan:
  stage: test
  tags:
    - dependabot
  script:
    - echo "running scan"
  # rules:
  #   - if: '$CI_COMMIT_REF_SLUG == "main" && $CI_MERGE_REQUEST_EVENT_TYPE != "detached"'


# This job is for building the image with Kaniko (dev)
build_for_review:
  image: 
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  stage: build
  tags:
    - dependabot  
  script:
    - mkdir -p /kaniko/.docker
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - "/kaniko/executor --context $CI_PROJECT_DIR $KANIKO_CACHE_ARGS
      --dockerfile $CI_PROJECT_DIR/Dockerfile
      --destination $CI_REGISTRY_IMAGE/$CI_PROJECT_NAME:dev-$CI_COMMIT_SHORT_SHA"


# This job deploys the image tagged with `latest` to the k8s staging cluster
deploy_review:
  image: bitnami/kubectl:latest
  stage: deploy
  tags:
    - dependabot  
  environment:
    name: review/$CI_COMMIT_REF_NAME
    url: https://reviews.dev.ltc.bcit.ca/$CI_PROJECT_NAME/$CI_COMMIT_SHORT_SHA
    kubernetes:
      namespace: $CI_PROJECT_NAME
    on_stop: stop_review
  # Using external secrets: https://docs.gitlab.com/ee/ci/secrets/index.html
  secrets:
    PROJECT_TOKEN_USERNAME:
      vault: dependabot-$CI_PROJECT_NAME/PROJECT_TOKEN_USERNAME@tokens
    PROJECT_TOKEN_PASSWORD:
      vault: dependabot-$CI_PROJECT_NAME/PROJECT_TOKEN_PASSWORD@tokens
  script:
    - echo "deploy to staging for review"
    - kubectl create ns $CI_PROJECT_NAME -o yaml --dry-run=client | kubectl apply -f -
    - "kubectl create secret docker-registry dependabot-$CI_PROJECT_NAME \
      --docker-server=$PROJECT_REGISTRY \
      --docker-username=$(cat $PROJECT_TOKEN_USERNAME) \
      --docker-password=$(cat $PROJECT_TOKEN_PASSWORD) \
      --docker-email=courseproduction@bcit.ca -o yaml --dry-run=client | kubectl apply -f -"
    - kubectl apply -k deploy/overlays/dev
    # - kubectl set image deploy/overlays/dev/deployment/$CI_PROJECT_NAME CI_PROJECT_NAME=$CI_REGISTRY_IMAGE/$CI_PROJECT_NAME:dev-$CI_COMMIT_SHORT_SHA
  rules:
    - if: $CI_MERGE_REQUEST_EVENT_TYPE != "detached"


# Stop review environment
stop_review:
  image: bitnami/kubectl:latest
  stage: deploy
  tags:
    - dependabot
  script:
    - echo "Remove review app"
    - kubectl delete -k deploy/overlays/dev
  environment:
    name: review/$CI_COMMIT_REF_NAME
    kubernetes:
      namespace: $CI_PROJECT_NAME
    action: stop
  when: manual


# This job is for building the image with Kaniko (latest)
build_latest:
  image: 
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  stage: build
  tags:
    - dependabot
  script:
    - mkdir -p /kaniko/.docker
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - "/kaniko/executor --context $CI_PROJECT_DIR $KANIKO_CACHE_ARGS
      --dockerfile $CI_PROJECT_DIR/Dockerfile
      --destination $CI_REGISTRY_IMAGE/$CI_PROJECT_NAME:latest"
  rules:
    - if: '$CI_COMMIT_REF_SLUG == "main" && $CI_MERGE_REQUEST_EVENT_TYPE != "detached"'


# This job deploys the image tagged with `latest` to the k8s staging cluster
deploy_latest:
  image: bitnami/kubectl:latest
  stage: deploy
  tags:
    - dependabot
  environment:
    name: staging
    url: https://staging.dev.ltc.bcit.ca/$CI_PROJECT_NAME
    kubernetes:
      namespace: $CI_PROJECT_NAME
  # no stop job for staging environment
  secrets:
    PROJECT_TOKEN_USERNAME:
      vault: dependabot-$CI_PROJECT_NAME/PROJECT_TOKEN_USERNAME@tokens
    PROJECT_TOKEN_PASSWORD:
      vault: dependabot-$CI_PROJECT_NAME/PROJECT_TOKEN_PASSWORD@tokens
  script:
    - echo "deploy to staging for review"
    - kubectl create ns $CI_PROJECT_NAME -o yaml --dry-run=client | kubectl apply -f -
    - "kubectl create secret docker-registry dependabot-$CI_PROJECT_NAME \
      --docker-server=$PROJECT_REGISTRY \
      --docker-username=$(cat $PROJECT_TOKEN_USERNAME) \
      --docker-password=$(cat $PROJECT_TOKEN_PASSWORD) \
      --docker-email=courseproduction@bcit.ca -o yaml --dry-run=client | kubectl apply -f -"
      # TODO: patch a service account for this secret
    - kubectl apply -k deploy/overlays/staging
  rules:
    - if: '$CI_COMMIT_REF_SLUG == "main" && $CI_MERGE_REQUEST_EVENT_TYPE != "detached"'


# This job is for building the image with Kaniko (stable)
build_stable:
  image: 
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  stage: build
  tags:
    - dependabot
  script:
    - mkdir -p /kaniko/.docker
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json  
    - "/kaniko/executor --context $CI_PROJECT_DIR 
      --dockerfile $CI_PROJECT_DIR/Dockerfile 
      --destination $CI_REGISTRY_IMAGE/$CI_PROJECT_NAME:$CI_COMMIT_TAG 
      --destination $CI_REGISTRY_IMAGE/$CI_PROJECT_NAME:stable"
  rules:
    - if: '$CI_COMMIT_REF_SLUG == "release" && $CI_MERGE_REQUEST_EVENT_TYPE != "detached"'


# This job is for running semantic-versioning for releasing whenever there is a merge request
# on the release branch
semver_release:
  image: node:12-buster-slim
  stage: semver-tag
  tags:
    - dependabot  
  before_script:
    - apt-get update && apt-get install -y --no-install-recommends git-core ca-certificates
    - export GIT_AUTHOR_NAME=$GITLAB_USER_LOGIN
    - export GIT_AUTHOR_EMAIL=$GITLAB_USER_EMAIL
    - export GIT_COMMITTER_NAME=$GITLAB_USER_LOGIN
    - export GIT_COMMITTER_EMAIL=$GITLAB_USER_EMAIL
    - npm install -g semantic-release @semantic-release/gitlab
  secrets:
    GITLAB_TOKEN:
      vault: dependabot-$CI_PROJECT_NAME/PROJECT_TOKEN_PASSWORD@tokens
  script:
    - semantic-release
      --branches release
      --repository-url $CI_PROJECT_URL
      --plugins '@semantic-release/commit-analyzer, @semantic-release/release-notes-generator, @semantic-release/gitlab'
  rules:
    - if: '$CI_COMMIT_REF_SLUG == "release" && $CI_MERGE_REQUEST_EVENT_TYPE != "detached"'


# This placeholder job reports back to the UI that the most recent `stable` image was deployed to production
deploy_production:
  image: bitnami/kubectl:latest
  stage: deploy
  tags:
    - dependabot
  environment: production
  rules:
    - if: $CI_COMMIT_TAG
  script:
      - echo "deploy to prod"
      # Fleet automatically picks up changes on release branch and deploys kustomized `overlays/prod`