##### Pipeline Overview #####
#
# #### `main` branch ####
#
# - continuously deployed to k8s staging cluster
# - on all MR, build new image tagged "latest"
# - deploy image tagged `latest` to k8s staging cluster
#
# #### `release` branch ####
#
# - continuously deployed to k8s prod cluster
# - on all MR, build new GitLab release
# - git tag commit with semantic-release version
# - build new image tagged with semver version
# - build new image tagged with `stable`
# - deploy image tagged `stable` to k8s prod cluster (Fleet)
#
# #### Notes ####
#
# - builds performed by Kaniko (k8s prod cluster)
#   - Kaniko docs are here: https://github.com/GoogleContainerTools/kaniko
#   - GitLab CI/CD pipeline docs for Kaniko builds are here: https://docs.gitlab.com/ee/ci/docker/using_kaniko.html
# - semantic versioning is automated by analyzing commit messages for keywords
#   - refer to : https://semantic-release.gitbook.io/semantic-release/usage/configuration for CLI configuration
# - Using external secrets: https://docs.gitlab.com/ee/ci/secrets/index.html

stages:
  - test
  - build
  - review
  - semver-tag
  - deploy

# include:
#   - template: Security/SAST.gitlab-ci.yml
#   - template: Security/Secret-Detection.gitlab-ci.yml
#   - template: Security/License-Scanning.gitlab-ci.yml

variables:
  # KANIKO_CACHE_ARGS: "--cache=true --cache-copy-layers=true --cache-ttl=24h"
  # VAULT_SERVER_URL: "https://vault.ltc.bcit.ca:8200"
  # VAULT_AUTH_ROLE: "read-tokens"
  PROJECT_REGISTRY: "registry.dev.ltc.bcit.ca"
  # new comment
  # KUBERNETES_POD_ANNOTATIONS_1: "app.gitlab.com/env=$CI_ENVIRONMENT_SLUG"
  # KUBERNETES_POD_ANNOTATIONS_2: "app.gitlab.com/app=$CI_PROJECT_PATH_SLUG"
  # Add namespace to default Rancher project (c-p6z2c:p-tfh6k)
  # KUBERNETES_POD_ANNOTATIONS_3: "field.cattle.io/projectId=p-tfh6k"
  # KUBERNETES_POD_ANNOTATIONS_4: "projectId=c-p6z2c:p-tfh6k"
  # KUBERNETES_NAMESPACE_OVERWRITE: ${CI_COMMIT_REF_SLUG}  
  VERSIONLABELMETHOD: "OnlyIfThisCommitHasVersion" # options: "OnlyIfThisCommitHasVersion","LastVersionTagInGit"
  DEV_URL: "https://reviews-dev-cp.dev.ltc.bcit.ca"
  STAGING_URL: "https://latest.dev.ltc.bcit.ca"
  TEAM_EMAIL: "courseproduction@bcit.ca"
  TEAM_TAG: "dev-cp"
  IMAGE_LABELS: >
    --label org.opencontainers.image.authors=$CI_SERVER_URL/$GITLAB_USER_LOGIN
    --label org.opencontainers.image.revision=$CI_COMMIT_SHA
    --label org.opencontainers.image.source=$CI_PROJECT_URL
  SEMVER_EXPORTS: >
    export GIT_AUTHOR_NAME=$GITLAB_USER_LOGIN && \
    export GIT_AUTHOR_EMAIL=$GITLAB_USER_EMAIL && \
    export GIT_COMMITTER_NAME=$GITLAB_USER_LOGIN && \
    export GIT_COMMITTER_EMAIL=$GITLAB_USER_EMAIL
  APP_SERVICE_PORT: 8000
  RANCHER_PROJECT_ID: "c-k7tjr:p-nqcxq"


get-latest-git-version:
  stage: .pre
  image: 
    name: alpine/git
    entrypoint: [""]
  rules:
    - if: '$VERSIONLABELMETHOD == "LastVersionTagInGit"'    
  script:
    - |
      echo "the google kaniko container does not have git and does not have a packge manager to install it"
      git clone https://github.com/GoogleContainerTools/kaniko.git
      cd kaniko
      echo "$(git describe --abbrev=0 --tags)" > ../VERSIONTAG.txt
      echo "VERSIONTAG.txt contains $(cat ../VERSIONTAG.txt)"
  artifacts:
    paths:
      - VERSIONTAG.txt
  tags:
    - $TEAM_TAG


# Kaniko template
.build_with_kaniko:
  image: 
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  stage: build
  script:
    - | 
      echo "Building and shipping image to $CI_REGISTRY_IMAGE"
      # Build date for opencontainers
      BUILDDATE="'$(date '+%FT%T%z' | sed -E -n 's/(\+[0-9]{2})([0-9]{2})$/\1:\2/p')'" #rfc 3339 date
      IMAGE_LABELS="$IMAGE_LABELS --label org.opencontainers.image.created=$BUILDDATE --label build-date=$BUILDDATE"
      # Description for opencontainers
      BUILDTITLE=$(echo $CI_PROJECT_TITLE | tr " " "_")
      IMAGE_LABELS="$IMAGE_LABELS --label org.opencontainers.image.title=$BUILDTITLE --label org.opencontainers.image.description=$BUILDTITLE"

      # Build Version Label and Tag from git tag, LastVersionTagInGit was placed by a previous job artifact
      if [[ "$VERSIONLABELMETHOD" == "LastVersionTagInGit" ]]; then VERSIONLABEL=$(cat VERSIONTAG.txt); fi
      if [[ "$VERSIONLABELMETHOD" == "OnlyIfThisCommitHasVersion" ]]; then VERSIONLABEL=$CI_COMMIT_TAG; fi
      if [[ ! -z "$VERSIONLABEL" ]]; then 
        IMAGE_LABELS="$IMAGE_LABELS --label org.opencontainers.image.version=$VERSIONLABEL"
        ADDITIONALTAGLIST="$ADDITIONALTAGLIST $VERSIONLABEL"
      fi
      
      ADDITIONALTAGLIST="$ADDITIONALTAGLIST $CI_COMMIT_SHORT_SHA"
      if [[ "$CI_COMMIT_BRANCH" == "$CI_DEFAULT_BRANCH" ]]; then ADDITIONALTAGLIST="$ADDITIONALTAGLIST latest"; fi
      if [[ "$CI_COMMIT_BRANCH" == "release" ]]; then ADDITIONALTAGLIST="$ADDITIONALTAGLIST stable"; fi
      if [[ -n "$ADDITIONALTAGLIST" ]]; then 
        for TAG in $ADDITIONALTAGLIST; do 
          FORMATTEDTAGLIST="${FORMATTEDTAGLIST} --tag $CI_REGISTRY_IMAGE:$TAG "; 
        done; 
      fi
      
      # Reformat Docker tags to kaniko's --destination argument:
      FORMATTEDTAGLIST=$(echo "${FORMATTEDTAGLIST}" | sed s/\-\-tag/\-\-destination/g) 

      echo "Kaniko arguments to run: --context $CI_PROJECT_DIR --dockerfile $CI_PROJECT_DIR/Dockerfile $KANIKO_CACHE_ARGS $FORMATTEDTAGLIST $IMAGE_LABELS"
      mkdir -p /kaniko/.docker
      echo "{\"auths\":{\"$CI_REGISTRY\":{\"auth\":\"$(echo -n $CI_REGISTRY_USER:$CI_REGISTRY_PASSWORD | base64)\"}}}" > /kaniko/.docker/config.json
      /kaniko/executor --context $CI_PROJECT_DIR --dockerfile $CI_PROJECT_DIR/Dockerfile $KANIKO_CACHE_ARGS $FORMATTEDTAGLIST $IMAGE_LABELS


# Deploy template
.deploy:
  image: bitnami/kubectl
  stage: deploy
  # needs: ["security_scan"]


# Run static application security test (https://issues.ltc.bcit.ca/help/user/application_security/sast/index)
# security_scan:
#   stage: test
#   tags:
#     - staging
#   script:
#     - echo "running scan"
  # rules:
  #   - if: '$CI_COMMIT_REF_SLUG == "main" && $CI_MERGE_REQUEST_EVENT_TYPE != "detached"'


# Build image with Kaniko (dev)
build_for_review:
  extends: .build_with_kaniko
  environment:
    name: dev-cp
  rules:
    - if: ($CI_COMMIT_REF_SLUG != "main" || $CI_COMMIT_REF_SLUG != "release") && $CI_MERGE_REQUEST_EVENT_TYPE != "detached"
  tags:
    - $TEAM_TAG


# Deploy image on feature branch to a k8s dev cluster
deploy_review:
  extends: .deploy
  environment:
    name: dev-cp
    url: $DEV_URL/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME/review/$CI_COMMIT_REF_SLUG
    auto_stop_in: 1 week
    kubernetes:
      namespace: $CI_PROJECT_NAME-$CI_COMMIT_REF_SLUG
    on_stop: stop_review
  script:
    - kubectl create ns $CI_PROJECT_NAME-$CI_COMMIT_REF_SLUG -o yaml --dry-run=client | kubectl apply -f -
    - "echo -e \" \
      \nimages: \
      \n  - name: $CI_PROJECT_NAME \
      \n    newName: $CI_REGISTRY_IMAGE \
      \n    newTag: $CI_COMMIT_SHORT_SHA \
      \ncommonAnnotations: \
      \n  app.gitlab.com/app: $CI_PROJECT_PATH_SLUG \
      \n  app.gitlab.com/env: $CI_ENVIRONMENT_SLUG\" >> \
      deploy/overlays/dev/kustomization.yaml"
    # - kubectl kustomize patch deploy/overlays/dev/ingress-patch.yml
    - kubectl kustomize deploy/overlays/dev | kubectl apply -f -
    # add namespace to default Rancher project and update ingress to branch path
    - kubectl patch ns $CI_PROJECT_NAME-$CI_COMMIT_REF_SLUG -p \
      '{"metadata":{"annotations":{"field.cattle.io/projectId":$RANCHER_PROJECT_ID}},"spec":{"rules":[{"host":"$DEV_URL","http":{"paths":[{"backend":{"service":{"name":"$CI_PROJECT_NAME-service","port":{"number":$APP_SERVICE_PORT}}},"path":"/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME/review/$CI_COMMIT_REF_SLUG","pathType":"Prefix"}]}}]}}'
  rules:
    - if: ($CI_COMMIT_REF_SLUG != "main" || $CI_COMMIT_REF_SLUG != "release") && $CI_MERGE_REQUEST_EVENT_TYPE != "detached"
  tags:
    - $TEAM_TAG

# Stop review environment
stop_review:
  image: bitnami/kubectl
  stage: deploy 
  script:
    - kubectl delete ns $CI_PROJECT_NAME-$CI_COMMIT_REF_SLUG
  when: manual
  environment:
    name: dev-cp
    kubernetes:
      namespace: $CI_PROJECT_NAME-$CI_COMMIT_REF_SLUG
    action: stop
  tags:
    - $TEAM_TAG


##### Good to here #####


# Build image with Kaniko (latest)
build_latest:
  extends: .build_with_kaniko
  environment:
    name: staging
  rules:
    - if: $CI_COMMIT_REF_SLUG == "main" && $CI_MERGE_REQUEST_EVENT_TYPE != "detached"
  tags:
    - staging


# Deploy `latest` image to k8s staging cluster
deploy_latest:
  extends: .deploy
  environment:
    name: staging
    url: $STAGING_URL/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME
    kubernetes:
      namespace: $CI_PROJECT_NAME
  script:
    - kubectl create ns $CI_PROJECT_NAME -o yaml --dry-run=client | kubectl apply -f -
    - "echo -e \" \
      \ncommonAnnotations: \
      \n  app.gitlab.com/app: $CI_PROJECT_PATH_SLUG \
      \n  app.gitlab.com/env: $CI_ENVIRONMENT_SLUG\" >> \
      deploy/overlays/staging/kustomization.yaml"    
    - kubectl kustomize deploy/overlays/staging | kubectl apply -f -
    - kubectl patch ns $CI_PROJECT_NAME -p \
      '{"metadata":{"annotations":{"field.cattle.io/projectId":"c-p6z2c:p-tfh6k"}}}'    
  rules:
    - if: $CI_COMMIT_REF_SLUG == "main" && $CI_MERGE_REQUEST_EVENT_TYPE != "detached"
  tags:
    - staging
# TODO: on merge, stop review environment


# Build image with Kaniko (stable)
build_stable:
  extends: .build_with_kaniko
  rules:
    - if: $CI_COMMIT_REF_SLUG == "release" && $CI_MERGE_REQUEST_EVENT_TYPE != "detached"
  tags:
    - production


# This job is for running semantic-versioning for releasing whenever there is a merge request
# on the release branch
semver_release:
  image: node:12-buster-slim
  stage: semver-tag
  variables:
    VAULT_AUTH_ROLE: "read-tokens-haproxy"  
  secrets:
    GITLAB_TOKEN:
      vault: dependabot-$CI_PROJECT_NAME/PROJECT_TOKEN_PASSWORD@tokens
      file: false
  before_script:
    - apt-get update && apt-get install -y --no-install-recommends git-core ca-certificates
    - export GIT_AUTHOR_NAME=$GITLAB_USER_LOGIN
    - export GIT_AUTHOR_EMAIL=$GITLAB_USER_EMAIL
    - export GIT_COMMITTER_NAME=$GITLAB_USER_LOGIN
    - export GIT_COMMITTER_EMAIL=$GITLAB_USER_EMAIL
    - npm install -g semantic-release @semantic-release/gitlab
  script:
    - semantic-release
      --branches release
      --repository-url $CI_PROJECT_URL
      --plugins '@semantic-release/commit-analyzer, @semantic-release/release-notes-generator, @semantic-release/gitlab'
  rules:
    - if: $CI_COMMIT_REF_SLUG == "release" && $CI_MERGE_REQUEST_EVENT_TYPE != "detached"
  tags:
    - production


# This placeholder job reports back to the UI that the most recent `stable` image was deployed to production
deploy_production:
  image: bitnami/kubectl
  stage: deploy
  environment: production
  rules:
    - if: $CI_COMMIT_TAG
  script:
      - echo "deployed to prod"
      # Fleet automatically picks up changes on release branch and deploys kustomized `overlays/prod`
  tags:
    - production