##### Pipeline Overview #####
#
# #### `main` branch ####
#
# - continuously deployed to k8s staging cluster
# - on all MR, build new image tagged "latest"
# - deploy image tagged `latest` to k8s staging cluster
#
# #### `release` branch ####
#
# - continuously deployed to k8s prod cluster
# - on all MR, build new GitLab release
# - git tag commit with semantic-release version
# - build new image tagged with semver version
# - build new image tagged with `stable`
# - deploy image tagged `stable` to k8s prod cluster (Fleet)
#
# #### Notes ####
#
# - builds performed by Kaniko (k8s prod cluster)
#   - Kaniko docs are here: https://github.com/GoogleContainerTools/kaniko
#   - GitLab CI/CD pipeline docs for Kaniko builds are here: https://docs.gitlab.com/ee/ci/docker/using_kaniko.html
# - semantic versioning is automated by analyzing commit messages for keywords
#   - refer to : https://semantic-release.gitbook.io/semantic-release/usage/configuration for CLI configuration
# - Using external secrets: https://docs.gitlab.com/ee/ci/secrets/index.html


image: bitnami/kubectl


variables:
  TEAM_TAG: "dev-cp"
  APP_SERVICE_PORT: 8000
  VAULT_AUTH_ROLE: "read-tokens-$CI_PROJECT_NAME" 
  # KANIKO_CACHE_ARGS: "--cache=true --cache-copy-layers=true --cache-ttl=24h"
  IMAGE_LABELS: >
    --label org.opencontainers.image.authors=$CI_SERVER_URL/$GITLAB_USER_LOGIN
    --label org.opencontainers.image.revision=$CI_COMMIT_SHA
    --label org.opencontainers.image.source=$CI_PROJECT_URL
  RANCHER_PROJECT: "p-nqcxq" # default project


# include:
#   - template: Security/SAST.gitlab-ci.yml
#   - template: Security/Secret-Detection.gitlab-ci.yml
#   - template: Security/License-Scanning.gitlab-ci.yml
include:
  - local: '/deploy/.build-with-kaniko.yml'


stages:
  - test
  - build
  - review
  - semver-tag
  - deploy
  - cleanup


.feature-branch: &feature-branch
  rules:
    - if: ($CI_COMMIT_REF_SLUG != "main" || $CI_COMMIT_REF_SLUG != "release") && $CI_MERGE_REQUEST_EVENT_TYPE == "detached"
  tags:
    - $TEAM_TAG

.main-branch: &main-branch
  rules:
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
  tags:
    - staging

.release-branch: &release-branch
  rules:
    - if: $CI_COMMIT_REF_SLUG == "release" && $CI_MERGE_REQUEST_EVENT_TYPE == "detached"
  tags:
    - production

.gitlab-annotations: &gitlab-annotations



# needs: ["security_scan"]

# Run static application security test (https://issues.ltc.bcit.ca/help/user/application_security/sast/index)
# security_scan:
#   stage: test
#   tags:
#     - staging
#   script:
#     - echo "running scan"
  # rules:
  #   - if: '$CI_COMMIT_REF_SLUG == "main" && $CI_MERGE_REQUEST_EVENT_TYPE != "detached"'


# Build image with Kaniko (dev)
build_for_review:
  <<: *feature-branch
  extends: .build-with-kaniko


# Deploy image on feature branch to a k8s dev cluster
deploy_review:
  <<: *feature-branch
  stage: deploy
  script:
# attempt to create namespace; fail gracefully if already present
    - kubectl create ns $CI_COMMIT_REF_SLUG -o yaml --dry-run=client | kubectl apply -f -
# add kustomization annotations to pull latest commit image and link to GitLab Environment/Operations dashboards
    - "echo -e \" \
      \ncommonAnnotations: \
      \n  field.cattle.io/projectId: $RANCHER_PROJECT \
      \n  app.gitlab.com/app: $CI_PROJECT_PATH_SLUG \
      \n  app.gitlab.com/env: $CI_ENVIRONMENT_SLUG\" > \
      deploy/overlays/kustomization-patch.yaml"
    - echo `cat deploy/overlays/kustomization-patch.yaml` >> \
      deploy/overlays/dev/kustomization.yaml"
    - "echo -e \" \
      \nnamespace: $CI_COMMIT_REF_SLUG \
      \nimages: \
      \n  - name: $CI_PROJECT_NAME \
      \n    newName: $CI_REGISTRY_IMAGE \
      \n    newTag: $CI_COMMIT_SHORT_SHA\" >> \
      deploy/overlays/dev/kustomization.yaml"
# apply kustomized deployment (dev)
    - kubectl kustomize deploy/overlays/dev | kubectl apply -f -
# patch ingress to branch path
    - "echo -e \" \
      \nmetadata: \
      \n  name: $CI_PROJECT_NAME-ingress \
      \n  annotations: \
      \n    nginx.ingress.kubernetes.io/rewrite-target: /\\$2 \
      \n    nginx.ingress.kubernetes.io/configuration-snippet: rewrite ($CI_COMMIT_REF_SLUG)$ $CI_COMMIT_REF_SLUG/ redirect; \
      \nspec: \
      \n  rules: \
      \n  - host: $CI_PROJECT_NAME.$TEAM_TAG.$DEV_URL \
      \n    http: \
      \n      paths: \
      \n      - path: /$CI_COMMIT_REF_SLUG \
      \n        pathType: Prefix \
      \n        backend: \
      \n          service: \
      \n            name: $CI_PROJECT_NAME-service \
      \n            port: \
      \n              number: $APP_SERVICE_PORT\" > \
      deploy/overlays/dev/ingress-patch.yaml"
    - "kubectl patch ingress $CI_PROJECT_NAME-ingress \
        -n $CI_COMMIT_REF_SLUG \
        --patch \"$(cat deploy/overlays/dev/ingress-patch.yaml)\""
  environment:
    name: $TEAM_TAG/review/$CI_COMMIT_REF_NAME
    url: http://$CI_PROJECT_NAME.$TEAM_TAG.$DEV_URL/$CI_COMMIT_REF_SLUG
    auto_stop_in: 1 week
    kubernetes:
      namespace: $CI_COMMIT_REF_SLUG
    on_stop: stop_review


# Stop review environment
stop_review:
  stage: cleanup
  script:
    - kubectl delete ns $CI_COMMIT_REF_SLUG
  when: manual
  environment:
    name: $TEAM_TAG/review/$CI_COMMIT_REF_NAME
    kubernetes:
      namespace: $CI_COMMIT_REF_SLUG
    action: stop
  tags:
    - $TEAM_TAG


# Build image with Kaniko (latest)
build_latest:
  <<: *main-branch
  extends: .build-with-kaniko


# Deploy `latest` image to k8s staging cluster
deploy_latest:
  <<: *main-branch
  script:
    - kubectl create ns $CI_PROJECT_NAME -o yaml --dry-run=client | kubectl apply -f -
    - "echo -e \" \
      \ncommonAnnotations: \
      \n  field.cattle.io/projectId: $RANCHER_PROJECT \
      \n  app.gitlab.com/app: $CI_PROJECT_PATH_SLUG \
      \n  app.gitlab.com/env: $CI_ENVIRONMENT_SLUG\" > \
      deploy/overlays/kustomization-patch.yaml"
    - echo `cat deploy/overlays/kustomization-patch.yaml` >> \
      deploy/overlays/staging/kustomization.yaml"
    - kubectl kustomize deploy/overlays/staging | kubectl apply -f -
  environment:
    name: staging
    url: https://$CI_PROJECT_NAME.$STAGING_URL
    kubernetes:
      namespace: $CI_PROJECT_NAME


# Build image with Kaniko (stable)
build_stable:
  <<: *release-branch
  extends: .build-with-kaniko


# This job is for running semantic-versioning for releasing whenever there is a merge request
# on the release branch
semver_release:
  <<: *release-branch
  image: node:12-buster-slim
  stage: semver-tag
  secrets:
    GITLAB_TOKEN:
      vault: dependabot-$CI_PROJECT_NAME/PROJECT_TOKEN_PASSWORD@tokens
      file: false
  before_script:
    - |
      apt-get update && apt-get install -y --no-install-recommends git-core ca-certificates
      GIT_AUTHOR_NAME=$GITLAB_USER_LOGIN
      GIT_AUTHOR_EMAIL=$GITLAB_USER_EMAIL
      GIT_COMMITTER_NAME=$GITLAB_USER_LOGIN
      GIT_COMMITTER_EMAIL=$GITLAB_USER_EMAIL
      npm install -g semantic-release @semantic-release/gitlab
  script:
    - semantic-release
      --branches release
      --repository-url $CI_PROJECT_URL
      --plugins '@semantic-release/commit-analyzer, @semantic-release/release-notes-generator, @semantic-release/gitlab'


# This placeholder job reports back to the UI that the most recent `stable` image was deployed to production
deploy_production:
  stage: deploy
  script:
      - echo "deployed to prod"
      # Fleet automatically picks up changes on release branch and deploys kustomized `overlays/prod`
  environment: production
  rules:
    - if: $CI_COMMIT_TAG
  tags:
    - production
