
image: ${CI_DEPENDENCY_PROXY_GROUP_IMAGE_PREFIX}/bitnami/kubectl


variables:            # other global variables are set in GitLab Admin: https://issues.ltc.bcit.ca/admin/application_settings/ci_cd
  TEAM_TAG: "dev-cp"
  PROD_NAMESPACE: "qcon"
  APP_PORT: "8000"
  APP_DESCRIPTION: "Qcon makes it easy to update and manage quizzes and assessment questions using a familiar MS Word interface."
  APP_TAGLINE: "Qcon - for question conversion"
  # Don't edit these variables
  VAULT_AUTH_ROLE: "dependabot-$CI_PROJECT_NAME"
  GIT_FETCH_EXTRA_FLAGS: --tags
  CI_DEBUG_TRACE: true

include:
  - local: 'deploy/scripts/.build-image.yml'
  - local: 'deploy/scripts/.semantic-release.yml'
  - local: 'deploy/scripts/.utilities.yml'


stages:
  - init
  - tag
  - build
  - test
  - deploy
  - cleanup


initialize_build:             # Set standard variables and generate version tag for build.
  stage: init                 # $VERSION_TAG is added to the image as well as the deployment
  extends: .init


build_for_review:             # Build image with Kaniko (dev)
  stage: build
  variables:
    BUILD_ENV: dev
  extends:
    - .build_image
    - .feature_branch_rules


deploy_review:                # Deploy image on feature branch to a k8s dev cluster
  stage: deploy
  extends: .feature_branch_rules
  variables:
    BUILD_ENV: dev
  script:
    - !reference [.get_env, script]                   # set cluster env
    - !reference [.annotate_namespace, script]        # add namespace annotations to ensure it's in the default Rancher project
    - !reference [.annotate_deployment, script]       # add annotations about build to deployment
    - !reference [.kustomize_image, script]           # patch deployment to pull latest commit image
    - !reference [.add_common_annotations, script]    # link deployment to GitLab Environment/Operations dashboards
    - !reference [.patch_ingress_dev, script]         # replace ingress with rewrite-targets, sub-paths
    - !reference [.verify_kustomization, script]      # validate kustomization
    - "kubectl kustomize deploy/overlays/$BUILD_ENV \
        | kubectl apply -f -"                         # apply kustomized deployment (dev)
  environment:
    name: $TEAM_TAG/review/$CI_COMMIT_REF_SLUG
    url: http://$CI_PROJECT_NAME.$TEAM_TAG.$DEV_HOST/$CI_COMMIT_REF_SLUG
    kubernetes:
      namespace: $CI_COMMIT_REF_SLUG
    on_stop: stop_review
    auto_stop_in: 1 week
  after_script:
    - echo "Unset ENV variables after app deployment complete using kubectl set env [REPLICASET_NAME]"
#Remove the environment variable ENV from container 'c1' in all deployment configs
# kubectl set env deployments --all --containers="c1" ENV-


build_latest:                 # Build image with Kaniko (latest)
  stage: build
  variables:
    BUILD_ENV: staging
  extends:
    - .main_branch_rules
    - .build_image


deploy_latest:                # Deploy `latest` image to staging k8s cluster
  stage: deploy
  extends: .main_branch_rules
  variables:
    BUILD_ENV: staging
  secrets:
    TLS_CRT:
      vault: ssl-certificates/star-dev-ltc-bcit-ca-bundle.crt.base64@ltc-infrastructure
      file: false
    TLS_KEY:
      vault: ssl-certificates/star-dev-ltc-bcit-ca.key.base64@ltc-infrastructure
      file: false
  script:
    - !reference [.get_env, script]                   # attempt to create namespace; fail gracefully if already present
    - !reference [.annotate_namespace, script]        # attempt to create namespace; fail gracefully if already present
    - !reference [.annotate_deployment, script]       # attempt to create namespace; fail gracefully if already present
    - !reference [.kustomize_image, script]           # add kustomization annotations to pull latest commit image
    - !reference [.create_tls_secret, script]         # create "dev" TLS secret
    - !reference [.add_common_annotations, script]   # link deployment to GitLab Environment/Operations dashboards
    - !reference [.patch_ingress, script]             # patch ingress to branch path
    - !reference [.verify_kustomization, script]      # validate patches have correct syntax
    - "kubectl kustomize deploy/overlays/$BUILD_ENV \
        | kubectl apply -f -"                         # apply kustomized deployment (staging)
  environment:
    name: staging
    url: https://$STAGING_HOST/$CI_PROJECT_NAME
    kubernetes:
      namespace: $CI_PROJECT_NAME


semver_tag:                   # Creates a semantic-version tag that is applied to the release branch
  stage: tag
  extends: 
    - .semver_tag_rules
    - .semantic_release
  secrets:
    GITLAB_TOKEN:
      vault: dependabot-$CI_PROJECT_NAME/token@tokens
      file: false
  script:
    - "semantic-release \
        --branches release \
        --repository-url $CI_PROJECT_URL \
        --plugins '@semantic-release/commit-analyzer, \
          @semantic-release/release-notes-generator, \
          @semantic-release/gitlab'"


build_stable:                 # Build image with Kaniko (stable)
  stage: build
  variables:
    BUILD_ENV: prod
  extends:
    - .release_branch_rules
    - .build_image


deploy_production:            # Deploy `stable` image to production k8s cluster
  stage: deploy
  extends: .release_branch_rules
  variables:
    BUILD_ENV: prod
  secrets:
    TLS_CRT:
      vault: ssl-certificates/star-dev-ltc-bcit-ca-bundle.crt.base64@ltc-infrastructure
      file: false
    TLS_KEY:
      vault: ssl-certificates/star-dev-ltc-bcit-ca.key.base64@ltc-infrastructure
      file: false
  script:
    - !reference [.get_env, script]                   # attempt to create namespace; fail gracefully if already present
    - !reference [.annotate_namespace, script]        # attempt to create namespace; fail gracefully if already present
    - !reference [.annotate_deployment, script]       # attempt to create namespace; fail gracefully if already present
    - !reference [.kustomize_image, script]           # add kustomization annotations to pull latest commit image
    - !reference [.create_tls_secret, script]         # create "dev" TLS secret
    - !reference [.add_common_annotations, script]   # link deployment to GitLab Environment/Operations dashboards
    - !reference [.patch_ingress, script]             # patch ingress to branch path
    - !reference [.verify_kustomization, script]      # validate patches have correct syntax
    - "kubectl kustomize deploy/overlays/$BUILD_ENV \
        | kubectl apply -f -"                         # apply kustomized deployment (prod)
  environment:
    name: production
    url: https://$PROD_HOST/$CI_PROJECT_NAME
    kubernetes:
      namespace: $CI_PROJECT_NAME


stop_review:                # Stop review environment
  stage: cleanup
  extends: .feature_branch_rules
  script:
    - kubectl delete ns $CI_COMMIT_REF_SLUG
    - echo "###########################################"
    - echo "  $CI_COMMIT_REF_SLUG environment stopped  "
    - echo "###########################################"
  environment:
    name: $TEAM_TAG/review/$CI_COMMIT_REF_SLUG
    kubernetes:
      namespace: $CI_COMMIT_REF_SLUG
    action: stop
  rules:
    - if: '$CI_PIPELINE_SOURCE == "push" && $CI_OPEN_MERGE_REQUESTS'
      when: manual
  tags:
    - $TEAM_TAG