
image: ${CI_DEPENDENCY_PROXY_GROUP_IMAGE_PREFIX}/bitnami/kubectl


variables:            # other global variables are set in GitLab Admin: https://issues.ltc.bcit.ca/admin/application_settings/ci_cd
  TEAM_TAG: "dev-cp"
  PROD_NAMESPACE: "qcon"
  VAULT_AUTH_ROLE: "read-tokens-$CI_PROJECT_NAME" 


include:
  - local: '/deploy/scripts/.build-image.yml'
  - local: '/deploy/scripts/.patch-overlay.yml'
  - local: '/deploy/scripts/.semantic-release.yml'


stages:
  - semver-tag
  - build
  - test
  - deploy
  - cleanup


# Common Tags and Rules for jobs
.feature-branch: &feature-branch
  rules:
    - if: '$CI_COMMIT_BRANCH == "main" || $CI_COMMIT_BRANCH == "release"'
      when: never
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" || $CI_MERGE_REQUEST_EVENT_TYPE == "detached"'
      when: never
    - if: '$CI_PIPELINE_SOURCE == "push" && $CI_OPEN_MERGE_REQUESTS'
  tags:
    - $TEAM_TAG

.main-branch: &main-branch
  rules:
    - if: '$CI_COMMIT_REF_SLUG == "main" && $CI_PIPELINE_SOURCE == "push"'
  tags:
    - staging

.release-branch: &release-branch
  rules:
    - if: '$CI_COMMIT_REF_SLUG == "release" && $CI_PIPELINE_SOURCE == "push"'
  tags:
    - production
    

.build_for_review:       # Build image with Kaniko (dev)
  <<: *feature-branch
  extends: .build-image
  stage: build


.deploy_review:          # Deploy image on feature branch to a k8s dev cluster
  <<: *feature-branch
  variables:
    CI_ENV: dev
    CI_HOST: $DEV_HOST
  stage: deploy
  script:
    - "kubectl create ns $CI_COMMIT_REF_SLUG -o yaml --dry-run=client \
        | kubectl apply -f -"                       # attempt to create namespace; fail gracefully if already present
    - !reference [.kustomize-image, script]         # add kustomization annotations to pull latest commit image
    - !reference [.annotate-kustomization, script]  # link deployment to GitLab Environment/Operations dashboards
    - !reference [.patch-ingress-dev, script]       # patch ingress to branch path
    - "kubectl kustomize deploy/overlays/$CI_ENV \
        | kubectl apply -f -"                       # apply kustomized deployment (dev)
  environment:
    name: $TEAM_TAG/review/$CI_COMMIT_REF_NAME
    url: http://$CI_PROJECT_NAME.$TEAM_TAG.$CI_HOST/$CI_COMMIT_REF_SLUG
    auto_stop_in: 1 week
    kubernetes:
      namespace: $CI_COMMIT_REF_SLUG
    on_stop: stop-review


.build_latest:     # Build image with Kaniko (latest)
  <<: *main-branch
  extends: .build-image
  stage: build


deploy_latest:    # Deploy `latest` image to staging k8s cluster
  # <<: *main-branch
  <<: *feature-branch
  variables:
    CI_ENV: staging
    CI_HOST: $STAGING_HOST
  stage: deploy
  secrets:
    STAGING_TLS_CRT:
      vault: ssl-certificates/star-dev-ltc-bcit-ca-bundle.crt.base64@ltc-infrastructure
      file: false
    STAGING_TLS_KEY:
      vault: ssl-certificates/star-dev-ltc-bcit-ca.key.base64@ltc-infrastructure
      file: false
  script:
    - kubectl create ns $CI_PROJECT_NAME -o yaml --dry-run=client | kubectl apply -f -
    - "kubectl create secret tls star-dev-ltc-bcit-ca \
        --cert=$STAGING_TLS_CRT --key=$STAGING_TLS_KEY \
        -o yaml --dry-run=client | kubectl apply -f -"    # create tls secret for ingress
    - !reference [.annotate-kustomization, script]        # link deployment to GitLab Environment/Operations dashboards
    - !reference [.patch-ingress-staging, script]         # patch ingress to branch path
    - "kubectl kustomize deploy/overlays/$CI_ENV \
        | kubectl apply -f -"                             # apply kustomized deployment (staging)
  environment:
    name: staging
    url: https://$STAGING_HOST/$CI_PROJECT_NAME
    kubernetes:
      namespace: $CI_PROJECT_NAME


semver-release:       # Creates a semantic-version tag that is applied to the release branch
  <<: *release-branch
  extends: .semantic-release
  stage: semver-tag
  secrets:
    GITLAB_TOKEN:
      vault: dependabot-$CI_PROJECT_NAME/PROJECT_TOKEN_PASSWORD@tokens
      file: false
  script:
    - "semantic-release \
        --branches release \
        --repository-url $CI_PROJECT_URL \
        --plugins '@semantic-release/commit-analyzer, \
          @semantic-release/release-notes-generator, \
          @semantic-release/gitlab'"


build_stable:       # Build image with Kaniko (stable)
  extends: .build-image
  stage: build
  rules:
    - if: $CI_COMMIT_TAG
  tags:
    - production


deploy_production:    # Deploy `stable` image to production k8s cluster
  stage: deploy
  secrets:
    DEV_TLS_CRT:
      vault: ssl-certificates/star-dev-ltc-bcit-ca-bundle.crt.base64@ltc-infrastructure
      file: false
    DEV_TLS_KEY:
      vault: ssl-certificates/star-dev-ltc-bcit-ca.key.base64@ltc-infrastructure
      file: false
  script:
    - "kubectl create ns $PROD_NAMESPACE -o yaml --dry-run=client \
        | kubectl apply -f -"
    - annotate-overlay.yml
    - "kubectl kustomize deploy/overlays/prod \
        | kubectl apply -f -"
  environment:
    name: production
    url: https://$CI_PROJECT_NAME.$PROD_HOST
  rules:
    - if: $CI_COMMIT_TAG
  tags:
    - production


# Stop review environment
stop-review:              
  stage: cleanup
  <<: *feature-branch
  script:
    - kubectl delete ns $CI_COMMIT_REF_SLUG
    - echo "###########################################"
    - echo "  $CI_COMMIT_REF_SLUG environment stopped  "
    - echo "###########################################"
  environment:
    name: $TEAM_TAG/review/$CI_COMMIT_REF_NAME
    kubernetes:
      namespace: $CI_COMMIT_REF_SLUG
    action: stop
  rules:
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_OPEN_MERGE_REQUESTS
      when: manual
  tags:
    - $TEAM_TAG

