##### Pipeline Overview #####
#
# #### `main` branch ####
#
# - continuously deployed to k8s staging cluster
# - on all MR, build new image tagged "latest"
# - deploy image tagged `latest` to k8s staging cluster
#
# #### `release` branch ####
#
# - continuously deployed to k8s prod cluster
# - on all MR, build new GitLab release
# - git tag commit with semantic-release version
# - build new image tagged with semver version
# - build new image tagged with `stable`
# - deploy image tagged `stable` to k8s prod cluster (Fleet)
#
# #### Notes ####
#
# - builds performed by Kaniko (k8s prod cluster)
#   - Kaniko docs are here: https://github.com/GoogleContainerTools/kaniko
#   - GitLab CI/CD pipeline docs for Kaniko builds are here: https://docs.gitlab.com/ee/ci/docker/using_kaniko.html
# - semantic versioning is automated by analyzing commit messages for keywords
#   - refer to : https://semantic-release.gitbook.io/semantic-release/usage/configuration for CLI configuration

stages:
  - test
  - build
  - semver-tagging
  - release
  - deploy

# include:
#   - template: Security/SAST.gitlab-ci.yml
#   - template: Security/Secret-Detection.gitlab-ci.yml
#   - template: Security/License-Scanning.gitlab-ci.yml

variables:
  VAULT_SERVER_URL: "https://vault.ltc.bcit.ca:8200"
  VAULT_AUTH_ROLE: "deploy-tokens"
  KANIKO_CACHE_ARGS: "--cache=true --cache-copy-layers=true --cache-ttl=24h"
  VERSIONLABELMETHOD: "OnlyIfThisCommitHasVersion" # options: "OnlyIfThisCommitHasVersion","LastVersionTagInGit"
  IMAGE_LABELS: >
    --label org.opencontainers.image.vendor=$CI_SERVER_URL/$GITLAB_USER_LOGIN
    --label org.opencontainers.image.authors=$CI_SERVER_URL/$GITLAB_USER_LOGIN
    --label org.opencontainers.image.revision=$CI_COMMIT_SHA
    --label org.opencontainers.image.source=$CI_PROJECT_URL
    --label org.opencontainers.image.documentation=$CI_PROJECT_URL
    --label org.opencontainers.image.licenses=$CI_PROJECT_URL
    --label org.opencontainers.image.url=$CI_PROJECT_URL
    --label vcs-url=$CI_PROJECT_URL
    --label com.gitlab.ci.user=$CI_SERVER_URL/$GITLAB_USER_LOGIN
    --label com.gitlab.ci.email=$GITLAB_USER_EMAIL
    --label com.gitlab.ci.tagorbranch=$CI_COMMIT_REF_NAME
    --label com.gitlab.ci.pipelineurl=$CI_PIPELINE_URL
    --label com.gitlab.ci.commiturl=$CI_PROJECT_URL/commit/$CI_COMMIT_SHA
    --label com.gitlab.ci.cijoburl=$CI_JOB_URL
    --label com.gitlab.ci.mrurl=$CI_PROJECT_URL/-/merge_requests/$CI_MERGE_REQUEST_ID
    --label app.gitlab.com/env=$CI_ENVIRONMENT_SLUG
    --label app.gitlab.com/app=$CI_PROJECT_PATH_SLUG

# #### Re-usable configurations ####
#
# Kaniko template
# Hidden job to use as an "extends" template
.build_with_kaniko:
  stage: build
  image: 
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]

# Deploy template
.deploy:
  stage: deploy
  image: bitnami/kubectl:latest

# #### Jobs ####
#
# Run static application security test (https://issues.ltc.bcit.ca/help/user/application_security/sast/index)
security_scan:
  stage: test
  script:
    - echo "running scan"
  rules:
    - if: '$CI_COMMIT_REF_SLUG == "main" && $CI_MERGE_REQUEST_EVENT_TYPE != "detached"'

# This job is for building the image with Kaniko (latest)
build_latest:
  extends: .build_with_kaniko
  # needs: ["security_scan"]
  script:
    - | 
      echo "Building and shipping image to $CI_REGISTRY_IMAGE"
      #Build date for opencontainers
      BUILDDATE="'$(date '+%FT%T%z' | sed -E -n 's/(\+[0-9]{2})([0-9]{2})$/\1:\2/p')'" #rfc 3339 date
      IMAGE_LABELS="$IMAGE_LABELS --label org.opencontainers.image.created=$BUILDDATE --label build-date=$BUILDDATE"
      #Description for opencontainers
      BUILDTITLE=$(echo $CI_PROJECT_TITLE | tr " " "_")
      IMAGE_LABELS="$IMAGE_LABELS --label org.opencontainers.image.title=$BUILDTITLE --label org.opencontainers.image.description=$BUILDTITLE"
      #Add ref.name for opencontainers
      IMAGE_LABELS="$IMAGE_LABELS --label org.opencontainers.image.ref.name=$CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME"

      #Build Version Label and Tag from git tag, LastVersionTagInGit was placed by a previous job artifact
      if [[ "$VERSIONLABELMETHOD" == "LastVersionTagInGit" ]]; then VERSIONLABEL=$(cat VERSIONTAG.txt); fi
      if [[ "$VERSIONLABELMETHOD" == "OnlyIfThisCommitHasVersion" ]]; then VERSIONLABEL=$CI_COMMIT_TAG; fi
      if [[ ! -z "$VERSIONLABEL" ]]; then 
        IMAGE_LABELS="$IMAGE_LABELS --label org.opencontainers.image.version=$VERSIONLABEL"
        ADDITIONALTAGLIST="$ADDITIONALTAGLIST $VERSIONLABEL"
      fi
      
      ADDITIONALTAGLIST="$ADDITIONALTAGLIST $CI_COMMIT_REF_NAME $CI_COMMIT_SHORT_SHA"
      if [[ "$CI_COMMIT_BRANCH" == "$CI_DEFAULT_BRANCH" ]]; then ADDITIONALTAGLIST="$ADDITIONALTAGLIST latest"; fi
      if [[ -n "$ADDITIONALTAGLIST" ]]; then 
        for TAG in $ADDITIONALTAGLIST; do 
          FORMATTEDTAGLIST="${FORMATTEDTAGLIST} --tag $CI_REGISTRY_IMAGE:$TAG "; 
        done; 
      fi
      
      #Reformat Docker tags to kaniko's --destination argument:
      FORMATTEDTAGLIST=$(echo "${FORMATTEDTAGLIST}" | sed s/\-\-tag/\-\-destination/g) 

      echo "Kaniko arguments to run: --context $CI_PROJECT_DIR --dockerfile $CI_PROJECT_DIR/Dockerfile $KANIKO_CACHE_ARGS $FORMATTEDTAGLIST $IMAGE_LABELS"
      mkdir -p /kaniko/.docker
      echo "{\"auths\":{\"$CI_REGISTRY\":{\"auth\":\"$(echo -n $CI_REGISTRY_USER:$CI_REGISTRY_PASSWORD | base64)\"}}}" > /kaniko/.docker/config.json
      /kaniko/executor --context $CI_PROJECT_DIR --dockerfile $CI_PROJECT_DIR/Dockerfile $KANIKO_CACHE_ARGS $FORMATTEDTAGLIST $IMAGE_LABELS

  # mkdir -p /kaniko/.docker
  # echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json  
  # /kaniko/executor --context $CI_PROJECT_DIR --dockerfile $CI_PROJECT_DIR/Dockerfile --destination $CI_REGISTRY_IMAGE/$CI_PROJECT_NAME:latest $IMAGE_LABELS
  # rules:
  #   - if: '$CI_COMMIT_REF_SLUG == "main" && $CI_MERGE_REQUEST_EVENT_TYPE != "detached"'

# This job deploys the image tagged with `latest` to the k8s staging cluster
deploy_staging:
  extends: .deploy
  needs: ["build_latest"]
  environment:
    name: staging
    url: https://staging.dev.ltc.bcit.ca/$CI_PROJECT_NAME
    kubernetes:
      namespace: staging
  # rules:
  #   - if: '$CI_COMMIT_REF_SLUG == "main" && $CI_MERGE_REQUEST_EVENT_TYPE != "detached"'
  script:
      - echo "deploy to staging"
      - echo "$CI_REGISTRY"
      - 'kubectl create secret docker-registry gitlab-registry
      --docker-server="$CI_REGISTRY"
      --docker-username="$CI_DEPLOY_USER"
      --docker-password="$CI_DEPLOY_PASSWORD"
      --docker-email="$GITLAB_USER_EMAIL" -o yaml
      --dry-run=client | kubectl apply -f -'
    # - kubectl apply -k overlays/staging

#   - spin up and connect to Rancher staging cluster (need .kube/config for staging)
#   - pull latest image from GitLab registry (depenabot credentials from vault - deploy-tokens/dependabots/dependabot-web-apps)
#   - deploy the image using kustomize, injecting secrets from vault (vault path to app secrets)
# TODO: update overlays/staging/deployment.yaml to use pipeline variable ($CI_COMMIT_TAG) to pull appropriate image

read_secrets:
  stage: test
  secrets:
    DEPLOY_TOKEN:
      vault: dependabots/dependabot-web-apps@deploy-tokens  # translates to secret `ops/staging`, field `foo`
  script:
    - cat $DEPLOY_TOKEN

# This job is for running semantic-versioning for releasing whenever there is a merge request
# on the release branch
semver_release:
  image: node:12-buster-slim
  stage: release
  before_script:
    - apt-get update && apt-get install -y --no-install-recommends git-core ca-certificates
    - export GIT_AUTHOR_NAME=$GITLAB_USER_LOGIN
    - export GIT_AUTHOR_EMAIL=$GITLAB_USER_EMAIL
    - export GIT_COMMITTER_NAME=$GITLAB_USER_LOGIN
    - export GIT_COMMITTER_EMAIL=$GITLAB_USER_EMAIL
    - npm install -g semantic-release @semantic-release/gitlab
  script:
    - 'semantic-release'
  rules:
    - if: '$CI_COMMIT_REF_SLUG == "release" && $CI_MERGE_REQUEST_EVENT_TYPE != "detached"'

# This job is for building the image with Kaniko (stable)
build_stable:
  extends: .build_with_kaniko
  script:
    - mkdir -p /kaniko/.docker
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json  
    - "/kaniko/executor --context $CI_PROJECT_DIR 
      --dockerfile $CI_PROJECT_DIR/Dockerfile 
      --destination $CI_REGISTRY_IMAGE/$CI_PROJECT_NAME:$CI_COMMIT_TAG 
      --destination $CI_REGISTRY_IMAGE/$CI_PROJECT_NAME:stable"
  rules:
     - if: '$CI_COMMIT_TAG'

# This job deploys the most recent `stable` image to the k8s prod cluster
deploy_production:
  extends: .deploy
  needs: ["build_stable"]
  environment: production
  rules:
    - if: $CI_COMMIT_TAG
  script:
      - echo "deploy to prod"
    # - kubectl apply -k overlays/prod