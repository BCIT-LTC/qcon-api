# LTC CI/CD Source Project Pipeline
#
## Requirements
#   - this file
#   - a working `Dockerfile`
#   - a deployment package
#     (see https://infrastructure-documentation.ltc.bcit.ca/0_for-developers/getting-started/)
#
## General Pipeline Steps
#   1. Gather info
#   2. Build image
#   3. Deploy to a cluster
#     - main branch deploys to latest/stable; other branches deploy to a dev cluster for review

stages:
  - get info
  - test
  - publish
  - cleanup

## Project initialization
#   - a project access token is required and created on the first run. If the pipeline fails,
#     please wait 5 minutes and re-try after a token has been created.
project init:
  stage: get info
  extends:
    - ".project_init"

## Determine if there are existing git tags or a new tag is required
get info:
  stage: get info
  extends:
    - ".get_info"

## Build image and push to project registry
build image:
  stage: publish
  extends:
    - ".build_image"
    - ".build_image_rules"

## Deploy a dev branch for review
#   - uses a deployment package with a `dev` overlay (generic-dev is used if one hasn't been initialized)
deploy review:
  stage: publish
  variables:
    TARGET_ENV: dev
  extends:
    - ".deploy_review"
    - ".deploy_review_rules"
  tags:
    - dev

## Deploy latest/stable packages
#   - must have a deployment package with `latest` and `stable` overlays
#   - triggers pipelines in GitLab "Deployments/{projectName}" project
deploy to latest:
  stage: publish
  variables:
    TARGET_ENV: latest
  extends:
    - ".deploy"
    - ".deploy_latest_rules"
  environment:
    name: latest
    url: https://${HOST_LATEST}/$CI_PROJECT_NAME
  tags:
    - latest

deploy to stable:
  stage: publish
  variables:
    TARGET_ENV: stable
  extends:
    - ".deploy"
    - ".deploy_stable_rules"
  environment:
    name: stable
    url: https://${HOST_STABLE}/${CI_PROJECT_NAME}
  tags:
    - stable

## Removes dev cluster review (and all assets in the review branch namespace)
stop review:
  stage: cleanup
  extends:
    - ".undeploy_review"
    - ".undeploy_review_rules"

#
## ---------- Pipeline configuration ----------
#
variables: # other global variables are set in GitLab Admin
  # GENERIC_DEPLOYMENT: "true"
  #
  #   - if GENERIC_DEPLOYMENT is set to anything but "true", the pipeline expects a deployment package
  #     to exist in the "Deployments" GitLab group. Create a deployment package following the
  #     guide in "Deployments/CI Config".
  #
  #   - see https://infrastructure-documentation.dev.ltc.bcit.ca/ for additional info.
  #
  # DEPLOY_PKG_INIT: "true"       # to create an initial project deployment package
  DEPLOY_PKG_PROJECT_ID: "405"
  COMMON_NAMESPACE: "qcon" # combine apps into one namespace
  PIPELINE_DEBUG: "true"
#
#
#
## ---------- It's generally bad to change anything below here ----------
#
#
#
## Include common scripts
include:
  - project: deployments/ci-config
    file:
      - project-init.yml
      - get-info.yml
      - build.yml
      - deploy.yml
      - ".deploy-hydrate.yml"
      - ".vault.yml"
      - ".tls.yml"
      - ".rules.yml"
      - SAST.gitlab-ci.yml
      - Secret-Detection.gitlab-ci.yml

## Specify which runner should pick up pipeline jobs
default:
  tags:
    - utility

## Cache jobs based on branch
cache:
  key: $CI_COMMIT_REF_SLUG

## Configure security scanning
sast:
  stage: test
  extends:
    - ".deploy_stable_rules"

## Configure merge request pipelines
workflow:
  rules:
    - if: $CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS && $CI_PIPELINE_SOURCE == "push"
      when: never
    - if: "$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS"
      when: never
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" || $CI_COMMIT_BRANCH || $CI_COMMIT_TAG
