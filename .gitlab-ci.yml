
image: ${CI_DEPENDENCY_PROXY_GROUP_IMAGE_PREFIX}/bitnami/kubectl


variables:            # other global variables are set in GitLab Admin: https://issues.ltc.bcit.ca/admin/application_settings/ci_cd
  TEAM_TAG: "dev-cp"
  PROD_NAMESPACE: "qcon"
  APP_PORT: "8000"
  VAULT_AUTH_ROLE: "dependabot-$CI_PROJECT_NAME"  # vault policies: [read-tokens, read-apps, read-ssl-certificates]
  GIT_FETCH_EXTRA_FLAGS: --tags

include:
  - local: '/deploy/scripts/.build-image.yml'
  - local: '/deploy/scripts/.create-k8s-resources.yml'
  - local: '/deploy/scripts/.patch-overlay.yml'
  - local: '/deploy/scripts/.semantic-release.yml'


stages:
  - tag
  - build
  - test
  - deploy
  - cleanup


# Common Tags and Rules for jobs
.feature-branch: &feature-branch
  rules:
    - if: '$CI_COMMIT_BRANCH == "main" || $CI_COMMIT_BRANCH == "release"'
      when: never
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" || $CI_MERGE_REQUEST_EVENT_TYPE == "detached"'
      when: never
    - if: '$CI_PIPELINE_SOURCE == "push" && $CI_OPEN_MERGE_REQUESTS'
  tags:
    - $TEAM_TAG

.main-branch: &main-branch
  rules:
    - if: '$CI_COMMIT_REF_SLUG == "main" && $CI_PIPELINE_SOURCE == "push"'
  tags:
    - staging

.release-branch: &release-branch
  rules:
    - if: '$CI_COMMIT_REF_SLUG == "release" && $CI_PIPELINE_SOURCE == "push"'
  tags:
    - production


latest_version_tag:
  <<: *feature-branch
  image: ${CI_DEPENDENCY_PROXY_GROUP_IMAGE_PREFIX}/alpine/git:latest
  stage: tag
  script:    
    - echo "VERSION=$(git describe --tags $(git rev-list --tags --max-count=1) | cut -c 2-)" >> build.env
  artifacts:
    reports:
      dotenv: build.env


build_for_review:       # Build image with Kaniko (dev)
  <<: *feature-branch
  extends: .build-image
  stage: build
  dependencies:
    - latest_version_tag


deploy_review:          # Deploy image on feature branch to a k8s dev cluster
  <<: *feature-branch
  variables:
    CI_ENV: dev
  stage: deploy
  script:
    - !reference [.create-annotated-namespace, script]  # attempt to create namespace; fail gracefully if already present
    - !reference [.kustomize-image, script]             # add kustomization annotations to pull latest commit image
    - !reference [.annotate-kustomization, script]      # link deployment to GitLab Environment/Operations dashboards
    - "kubectl kustomize deploy/overlays/$CI_ENV \
        | kubectl apply -f -"                           # apply kustomized deployment (dev)
    - !reference [.patch-ingress-dev, script]           # patch ingress to branch path
  environment:
    name: $TEAM_TAG/review/$CI_COMMIT_REF_NAME
    url: http://$CI_PROJECT_NAME.$TEAM_TAG.$DEV_HOST/$CI_COMMIT_REF_SLUG
    auto_stop_in: 1 week
    kubernetes:
      namespace: $CI_COMMIT_REF_SLUG
    on_stop: stop-review
  after_script:
    - echo "Unset ENV variables after app deployment complete using kubectl set env [REPLICASET_NAME]"
#Remove the environment variable ENV from container 'c1' in all deployment configs
# kubectl set env deployments --all --containers="c1" ENV-


build_latest:     # Build image with Kaniko (latest)
  <<: *main-branch
  extends: .build-image
  stage: build


deploy_latest:    # Deploy `latest` image to staging k8s cluster
  <<: *main-branch
  variables:
    CI_ENV: staging
  stage: deploy
  secrets:
    TLS_CRT:
      vault: ssl-certificates/star-dev-ltc-bcit-ca-bundle.crt.base64@ltc-infrastructure
      file: false
    TLS_KEY:
      vault: ssl-certificates/star-dev-ltc-bcit-ca.key.base64@ltc-infrastructure
      file: false
  script:
    - !reference [.create-annotated-namespace, script]    # attempt to create namespace; fail gracefully if already present
    - !reference [.create-tls-secret, script]             # create "dev" TLS secret
    - !reference [.annotate-kustomization, script]        # link deployment to GitLab Environment/Operations dashboards
    - "kubectl kustomize deploy/overlays/$CI_ENV \
        | kubectl replace -f -"                           # replace kustomized deployment (staging)
    - !reference [.patch-ingress, script]                 # patch ingress to branch path
  environment:
    name: staging
    url: https://$STAGING_HOST/$CI_PROJECT_NAME
    kubernetes:
      namespace: $CI_PROJECT_NAME


semver-tag:       # Creates a semantic-version tag that is applied to the release branch
  <<: *release-branch
  extends: .semantic-release
  stage: tag
  secrets:
    GITLAB_TOKEN:
      vault: dependabot-$CI_PROJECT_NAME/PROJECT_TOKEN_PASSWORD@tokens
      file: false
  script:
    - "semantic-release \
        --branches release \
        --repository-url $CI_PROJECT_URL \
        --plugins '@semantic-release/commit-analyzer, \
          @semantic-release/release-notes-generator, \
          @semantic-release/gitlab'"
          

build_stable:         # Build image with Kaniko (stable)
  extends: .build-image
  stage: build
  rules:
    - if: $CI_COMMIT_TAG
  tags:
    - production


deploy_production:    # Deploy `stable` image to production k8s cluster
  <<: *release-branch
  variables:
    CI_ENV: prod
  stage: deploy
  secrets:
    TLS_CRT:
      vault: ssl-certificates/star-ltc-bcit-ca-bundle.crt.base64@ltc-infrastructure
      file: false
    TLS_KEY:
      vault: ssl-certificates/star-ltc-bcit-ca.key.base64@ltc-infrastructure
      file: false
  script:
    - !reference [.create-annotated-namespace, script]    # attempt to create namespace; fail gracefully if already present
    - !reference [.create-tls-secret, script]             # create "dev" TLS secret
    - !reference [.annotate-kustomization, script]        # link deployment to GitLab Environment/Operations dashboards
    - "kubectl kustomize deploy/overlays/$CI_ENV \
        | kubectl replace -f -"                           # replace kustomized deployment (prod)
    - !reference [.patch-ingress, script]                 # patch ingress to branch path
  environment:
    name: production
    url: https://$PROD_HOST/$CI_PROJECT_NAME
  rules:
    - if: $CI_COMMIT_TAG
  tags:
    - production


# Stop review environment
stop-review:              
  stage: cleanup
  <<: *feature-branch
  script:
    - kubectl delete ns $CI_COMMIT_REF_SLUG
    - echo "###########################################"
    - echo "  $CI_COMMIT_REF_SLUG environment stopped  "
    - echo "###########################################"
  environment:
    name: $TEAM_TAG/review/$CI_COMMIT_REF_NAME
    kubernetes:
      namespace: $CI_COMMIT_REF_SLUG
    action: stop
  rules:
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_OPEN_MERGE_REQUESTS
      when: manual
  tags:
    - $TEAM_TAG

