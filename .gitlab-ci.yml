# LTC GitLab CI/CD Pipeline

# Requirements:
#   - Dockerfile:
#       - workflow is based on container pattern
#   - 3-branch workflow:
#       - main (default)
#       - feature branches (based on merge request names)
#           - semantic-release automatically increments version based on commit message prefix (feat, fix, patch)
#       - release branch
#   - Project token initialization:
#       - secure project communication by running the `auth-init.sh` script
#   - Copy and update the following files/folders:
#       - `deploy` folder: update kubernetes manifiests accordingly
#       - `docker-compose`: local development
#       - `.gitlab-ci.yml`: ci/cd pipeline
#       - update the variables below to match your app (if not using PROD_NAMESPACE update staging/prod environment variables)


variables:                  # other global variables are set in GitLab Admin: https://issues.ltc.bcit.ca/admin/application_settings/ci_cd
  CLUSTER_ENV: "dev-cp"     # options: dev-cp, dev-vsm
  PROD_NAMESPACE: "qcon"    # combine apps into one namespace if following microservice pattern
  APP_PORT: "8000"
  APP_DESCRIPTION: "Qcon makes it easy to update and manage quizzes and assessment questions using a familiar MS Word interface."
  APP_TAGLINE: "Qcon - for question conversion"
#
#
#
############### Edit below here at your peril! ###############
#
#
#
  VAULT_AUTH_ROLE: "dependabot-$CI_PROJECT_NAME"    # Standard policies: [default, jwt, read-tokens, read-apps, read-ssl-certificates]
  GIT_FETCH_EXTRA_FLAGS: "--tags"
  PIPELINE_DEBUG: "true"

image: bitnami/kubectl


include:
  - local: 'deploy/scripts/.build-image.yml'
  - local: 'deploy/scripts/.semantic-release.yml'
  - local: 'deploy/scripts/.utilities.yml'


stages:
  - initialize_env
  - tag
  - build
  - test
  - deploy
  - cleanup


get_latest_version_tag:               # Set standard variables and generate version tag for build.
  stage: initialize_env             #   - $VERSION_TAG is added to the image as well as the deployment
  extends: .version_tag


.build_for_review:                     # Build image with Kaniko
  stage: build
  variables:
    BUILD_ENV: dev
  extends:
    - .build_image
    - .feature_branch_rules


deploy_review:                        # Deploy feature branch image to a dev cluster
  stage: deploy
  extends:
    - .feature_branch_rules
  variables:
    BUILD_ENV: dev
  script:
    - !reference [.get_env, script]                         # set cluster env
    - !reference [.replace_namespace, script]               # add namespace annotations to ensure it's in the default Rancher project
    - !reference [.replace_deployment, script]              # add annotations about build to deployment
    - !reference [.kustomize_image, script]                 # patch deployment to pull latest commit image
    - !reference [.patch_ingress, script]                   # replace ingress with rewrite-targets, sub-paths
    - !reference [.verify_kustomization, script]            # validate kustomization
    - "kubectl kustomize deploy/overlays/$BUILD_ENV \
        | kubectl apply -f -"                               # apply kustomized deployment
  environment:
    name: $CLUSTER_ENV/review/$CI_COMMIT_REF_SLUG
    url: http://$CI_PROJECT_NAME.$CLUSTER_ENV.$DEV_HOST/$CI_COMMIT_REF_SLUG
    kubernetes:
      namespace: $CI_COMMIT_REF_SLUG
    on_stop: stop_review
    auto_stop_in: 1 week
  after_script:
    - echo "Unset ENV variables after app deployment complete using kubectl set env [REPLICASET_NAME]"
# TODO: Remove the environment variable ENV from container 'c1' in all deployment configs
# kubectl set env deployments --all --containers="c1" ENV-


build_latest:                         # Build image with Kaniko (latest)
  stage: build
  variables:
    BUILD_ENV: staging
  extends:
    - .main_branch_rules
    - .build_image


deploy_latest:                        # Deploy `latest` image to staging k8s cluster
  stage: deploy
  extends: 
    - .main_branch_rules
  variables:
    BUILD_ENV: staging
  secrets:
    TLS_CRT:
      vault: ssl-certificates/star-dev-ltc-bcit-ca-bundle.crt.base64@ltc-infrastructure
      file: false
    TLS_KEY:
      vault: ssl-certificates/star-dev-ltc-bcit-ca.key.base64@ltc-infrastructure
      file: false
  script:
    - !reference [.get_env, script]                         # set cluster env
    - !reference [.replace_namespace, script]               # add namespace annotations to ensure it's in the default Rancher project
    - !reference [.replace_deployment, script]              # add annotations about build to deployment
    - !reference [.kustomize_image, script]                 # patch deployment to pull latest commit image
    - !reference [.create_tls_secret, script]               # create TLS secret
    - !reference [.patch_ingress, script]                   # replace ingress with rewrite-targets, sub-paths
    - !reference [.verify_kustomization, script]            # validate kustomization
    - "kubectl kustomize deploy/overlays/$BUILD_ENV \
        | kubectl apply -f -"                               # apply kustomized deployment
  environment:
    name: staging
    url: https://$STAGING_HOST/$CI_PROJECT_NAME
    kubernetes:
      namespace: $PROD_NAMESPACE      # update to '$CI_PROJECT_NAME' if projects are independent


semver_tag:                           # Creates a semantic-version tag that is applied to the release branch
  stage: tag
  extends: 
    - .semver_tag_rules
    - .semantic_release
  secrets:
    GITLAB_TOKEN:
      vault: dependabot-$CI_PROJECT_NAME/token@tokens
      file: false
  script:
    - "semantic-release \
        --branches release \
        --repository-url $CI_PROJECT_URL \
        --plugins '@semantic-release/commit-analyzer, \
          @semantic-release/release-notes-generator, \
          @semantic-release/gitlab'"


build_stable:                         # Build image with Kaniko (stable)
  stage: build
  variables:
    BUILD_ENV: prod
  extends:
    - .update_version_tag
    - .release_branch_rules
    - .build_image


deploy_production:                    # Deploy `stable` image to production k8s cluster
  stage: deploy
  extends: 
    - .release_branch_rules
  variables:
    BUILD_ENV: prod
  secrets:
    TLS_CRT:
      vault: ssl-certificates/star-dev-ltc-bcit-ca-bundle.crt.base64@ltc-infrastructure
      file: false
    TLS_KEY:
      vault: ssl-certificates/star-dev-ltc-bcit-ca.key.base64@ltc-infrastructure
      file: false
  script:
    - !reference [.get_env, script]                         # set cluster env
    - !reference [.replace_namespace, script]               # add namespace annotations to ensure it's in the default Rancher project
    - !reference [.replace_deployment, script]              # add annotations about build to deployment
    - !reference [.kustomize_image, script]                 # patch deployment to pull latest commit image
    - !reference [.create_tls_secret, script]               # create TLS secret
    - !reference [.patch_ingress, script]                   # replace ingress with rewrite-targets, sub-paths
    - !reference [.verify_kustomization, script]            # validate kustomization
    - "kubectl kustomize deploy/overlays/$BUILD_ENV \
        | kubectl apply -f -"                               # apply kustomized deployment
  environment:
    name: production
    url: https://$PROD_HOST/$CI_PROJECT_NAME
    kubernetes:
      namespace: $PROD_NAMESPACE      # update to '$CI_PROJECT_NAME' if projects are independent


stop_review:                          # Stop review environment
  stage: cleanup
  extends: .feature_branch_rules
  script:
    - |
      kubectl delete ns $CI_COMMIT_REF_SLUG
      echo -e " \
        \n########################################### \
        \n  $CI_COMMIT_REF_SLUG environment stopped  \
        \n###########################################"
  environment:
    name: $CLUSTER_ENV/review/$CI_COMMIT_REF_SLUG
    kubernetes:
      namespace: $CI_COMMIT_REF_SLUG
    action: stop
  rules:
    - if: '$CI_PIPELINE_SOURCE == "push" && $CI_OPEN_MERGE_REQUESTS'
      when: manual
  tags:
    - $CLUSTER_ENV